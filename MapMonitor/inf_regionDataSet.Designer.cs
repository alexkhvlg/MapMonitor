//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MapMonitor {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("inf_regionDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class inf_regionDataSet : global::System.Data.DataSet {
        
        private table_groupsDataTable tabletable_groups;
        
        private table_groups_tableDataTable tabletable_groups_table;
        
        private table_infoDataTable tabletable_info;
        
        private global::System.Data.DataRelation relationtable_groups_table_table_groups;
        
        private global::System.Data.DataRelation relationtable_info_table_groups_table;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public inf_regionDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected inf_regionDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["table_groups"] != null)) {
                    base.Tables.Add(new table_groupsDataTable(ds.Tables["table_groups"]));
                }
                if ((ds.Tables["table_groups_table"] != null)) {
                    base.Tables.Add(new table_groups_tableDataTable(ds.Tables["table_groups_table"]));
                }
                if ((ds.Tables["table_info"] != null)) {
                    base.Tables.Add(new table_infoDataTable(ds.Tables["table_info"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public table_groupsDataTable table_groups {
            get {
                return this.tabletable_groups;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public table_groups_tableDataTable table_groups_table {
            get {
                return this.tabletable_groups_table;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public table_infoDataTable table_info {
            get {
                return this.tabletable_info;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            inf_regionDataSet cln = ((inf_regionDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["table_groups"] != null)) {
                    base.Tables.Add(new table_groupsDataTable(ds.Tables["table_groups"]));
                }
                if ((ds.Tables["table_groups_table"] != null)) {
                    base.Tables.Add(new table_groups_tableDataTable(ds.Tables["table_groups_table"]));
                }
                if ((ds.Tables["table_info"] != null)) {
                    base.Tables.Add(new table_infoDataTable(ds.Tables["table_info"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tabletable_groups = ((table_groupsDataTable)(base.Tables["table_groups"]));
            if ((initTable == true)) {
                if ((this.tabletable_groups != null)) {
                    this.tabletable_groups.InitVars();
                }
            }
            this.tabletable_groups_table = ((table_groups_tableDataTable)(base.Tables["table_groups_table"]));
            if ((initTable == true)) {
                if ((this.tabletable_groups_table != null)) {
                    this.tabletable_groups_table.InitVars();
                }
            }
            this.tabletable_info = ((table_infoDataTable)(base.Tables["table_info"]));
            if ((initTable == true)) {
                if ((this.tabletable_info != null)) {
                    this.tabletable_info.InitVars();
                }
            }
            this.relationtable_groups_table_table_groups = this.Relations["table_groups_table_table_groups"];
            this.relationtable_info_table_groups_table = this.Relations["table_info_table_groups_table"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass() {
            this.DataSetName = "inf_regionDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/inf_regionDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletable_groups = new table_groupsDataTable();
            base.Tables.Add(this.tabletable_groups);
            this.tabletable_groups_table = new table_groups_tableDataTable();
            base.Tables.Add(this.tabletable_groups_table);
            this.tabletable_info = new table_infoDataTable();
            base.Tables.Add(this.tabletable_info);
            this.relationtable_groups_table_table_groups = new global::System.Data.DataRelation("table_groups_table_table_groups", new global::System.Data.DataColumn[] {
                        this.tabletable_groups_table.id_groupColumn}, new global::System.Data.DataColumn[] {
                        this.tabletable_groups.idColumn}, false);
            this.Relations.Add(this.relationtable_groups_table_table_groups);
            this.relationtable_info_table_groups_table = new global::System.Data.DataRelation("table_info_table_groups_table", new global::System.Data.DataColumn[] {
                        this.tabletable_info.idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletable_groups_table.id_tableColumn}, false);
            this.Relations.Add(this.relationtable_info_table_groups_table);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializetable_groups() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializetable_groups_table() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializetable_info() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            inf_regionDataSet ds = new inf_regionDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void table_groupsRowChangeEventHandler(object sender, table_groupsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void table_groups_tableRowChangeEventHandler(object sender, table_groups_tableRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void table_infoRowChangeEventHandler(object sender, table_infoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class table_groupsDataTable : global::System.Data.TypedTableBase<table_groupsRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnname_group;
            
            private global::System.Data.DataColumn columndescript;
            
            private global::System.Data.DataColumn columnorder_num;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groupsDataTable() {
                this.TableName = "table_groups";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal table_groupsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected table_groupsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn name_groupColumn {
                get {
                    return this.columnname_group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn descriptColumn {
                get {
                    return this.columndescript;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn order_numColumn {
                get {
                    return this.columnorder_num;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groupsRow this[int index] {
                get {
                    return ((table_groupsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_groupsRowChangeEventHandler table_groupsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_groupsRowChangeEventHandler table_groupsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_groupsRowChangeEventHandler table_groupsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_groupsRowChangeEventHandler table_groupsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Addtable_groupsRow(table_groupsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groupsRow Addtable_groupsRow(string name_group, string descript, int order_num) {
                table_groupsRow rowtable_groupsRow = ((table_groupsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        name_group,
                        descript,
                        order_num};
                rowtable_groupsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtable_groupsRow);
                return rowtable_groupsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groupsRow FindByid(int id) {
                return ((table_groupsRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                table_groupsDataTable cln = ((table_groupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new table_groupsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname_group = base.Columns["name_group"];
                this.columndescript = base.Columns["descript"];
                this.columnorder_num = base.Columns["order_num"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname_group = new global::System.Data.DataColumn("name_group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname_group);
                this.columndescript = new global::System.Data.DataColumn("descript", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescript);
                this.columnorder_num = new global::System.Data.DataColumn("order_num", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnorder_num);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = -1;
                this.columnid.AutoIncrementStep = -1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groupsRow Newtable_groupsRow() {
                return ((table_groupsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new table_groupsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(table_groupsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.table_groupsRowChanged != null)) {
                    this.table_groupsRowChanged(this, new table_groupsRowChangeEvent(((table_groupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.table_groupsRowChanging != null)) {
                    this.table_groupsRowChanging(this, new table_groupsRowChangeEvent(((table_groupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.table_groupsRowDeleted != null)) {
                    this.table_groupsRowDeleted(this, new table_groupsRowChangeEvent(((table_groupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.table_groupsRowDeleting != null)) {
                    this.table_groupsRowDeleting(this, new table_groupsRowChangeEvent(((table_groupsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Removetable_groupsRow(table_groupsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                inf_regionDataSet ds = new inf_regionDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "table_groupsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class table_groups_tableDataTable : global::System.Data.TypedTableBase<table_groups_tableRow> {
            
            private global::System.Data.DataColumn columnid_table;
            
            private global::System.Data.DataColumn columnid_group;
            
            private global::System.Data.DataColumn columnorder_num;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groups_tableDataTable() {
                this.TableName = "table_groups_table";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal table_groups_tableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected table_groups_tableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn id_tableColumn {
                get {
                    return this.columnid_table;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn id_groupColumn {
                get {
                    return this.columnid_group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn order_numColumn {
                get {
                    return this.columnorder_num;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groups_tableRow this[int index] {
                get {
                    return ((table_groups_tableRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_groups_tableRowChangeEventHandler table_groups_tableRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_groups_tableRowChangeEventHandler table_groups_tableRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_groups_tableRowChangeEventHandler table_groups_tableRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_groups_tableRowChangeEventHandler table_groups_tableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Addtable_groups_tableRow(table_groups_tableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groups_tableRow Addtable_groups_tableRow(table_infoRow parenttable_infoRowBytable_info_table_groups_table, int id_group, int order_num) {
                table_groups_tableRow rowtable_groups_tableRow = ((table_groups_tableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        id_group,
                        order_num};
                if ((parenttable_infoRowBytable_info_table_groups_table != null)) {
                    columnValuesArray[0] = parenttable_infoRowBytable_info_table_groups_table[0];
                }
                rowtable_groups_tableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtable_groups_tableRow);
                return rowtable_groups_tableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groups_tableRow FindByid_tableid_group(int id_table, int id_group) {
                return ((table_groups_tableRow)(this.Rows.Find(new object[] {
                            id_table,
                            id_group})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                table_groups_tableDataTable cln = ((table_groups_tableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new table_groups_tableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnid_table = base.Columns["id_table"];
                this.columnid_group = base.Columns["id_group"];
                this.columnorder_num = base.Columns["order_num"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnid_table = new global::System.Data.DataColumn("id_table", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_table);
                this.columnid_group = new global::System.Data.DataColumn("id_group", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_group);
                this.columnorder_num = new global::System.Data.DataColumn("order_num", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnorder_num);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid_table,
                                this.columnid_group}, true));
                this.columnid_table.AllowDBNull = false;
                this.columnid_group.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groups_tableRow Newtable_groups_tableRow() {
                return ((table_groups_tableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new table_groups_tableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(table_groups_tableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.table_groups_tableRowChanged != null)) {
                    this.table_groups_tableRowChanged(this, new table_groups_tableRowChangeEvent(((table_groups_tableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.table_groups_tableRowChanging != null)) {
                    this.table_groups_tableRowChanging(this, new table_groups_tableRowChangeEvent(((table_groups_tableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.table_groups_tableRowDeleted != null)) {
                    this.table_groups_tableRowDeleted(this, new table_groups_tableRowChangeEvent(((table_groups_tableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.table_groups_tableRowDeleting != null)) {
                    this.table_groups_tableRowDeleting(this, new table_groups_tableRowChangeEvent(((table_groups_tableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Removetable_groups_tableRow(table_groups_tableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                inf_regionDataSet ds = new inf_regionDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "table_groups_tableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class table_infoDataTable : global::System.Data.TypedTableBase<table_infoRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnscheme_name;
            
            private global::System.Data.DataColumn columnname_db;
            
            private global::System.Data.DataColumn columnname_map;
            
            private global::System.Data.DataColumn columnlablefiled;
            
            private global::System.Data.DataColumn columnmap_style;
            
            private global::System.Data.DataColumn columngeom_field;
            
            private global::System.Data.DataColumn columnstyle_field;
            
            private global::System.Data.DataColumn columngeom_type;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columndefault_style;
            
            private global::System.Data.DataColumn columnfontname;
            
            private global::System.Data.DataColumn columnfontcolor;
            
            private global::System.Data.DataColumn columnfontframecolor;
            
            private global::System.Data.DataColumn columnfontsize;
            
            private global::System.Data.DataColumn columnsymbol;
            
            private global::System.Data.DataColumn columnpencolor;
            
            private global::System.Data.DataColumn columnpentype;
            
            private global::System.Data.DataColumn columnpenwidth;
            
            private global::System.Data.DataColumn columnbrushbgcolor;
            
            private global::System.Data.DataColumn columnbrushfgcolor;
            
            private global::System.Data.DataColumn columnbrushstyle;
            
            private global::System.Data.DataColumn columnbrushhatch;
            
            private global::System.Data.DataColumn columnread_only;
            
            private global::System.Data.DataColumn columnphoto;
            
            private global::System.Data.DataColumn columnid_style;
            
            private global::System.Data.DataColumn columnpk_fileld;
            
            private global::System.Data.DataColumn columnis_style;
            
            private global::System.Data.DataColumn columnsource_layer;
            
            private global::System.Data.DataColumn columnimage_column;
            
            private global::System.Data.DataColumn columnangle_column;
            
            private global::System.Data.DataColumn columnuse_bounds;
            
            private global::System.Data.DataColumn columnmin_scale;
            
            private global::System.Data.DataColumn columnmax_scale;
            
            private global::System.Data.DataColumn columnid_group;
            
            private global::System.Data.DataColumn columndefault_visibl;
            
            private global::System.Data.DataColumn columnsql_view_string;
            
            private global::System.Data.DataColumn columnorder_num;
            
            private global::System.Data.DataColumn columnview_name;
            
            private global::System.Data.DataColumn columnmasterdb_history_id;
            
            private global::System.Data.DataColumn columnconnection_string;
            
            private global::System.Data.DataColumn columnremote_lgn;
            
            private global::System.Data.DataColumn columnremote_pwd;
            
            private global::System.Data.DataColumn columnfixed_history_id;
            
            private global::System.Data.DataColumn columnrange_colors;
            
            private global::System.Data.DataColumn columnrange_column;
            
            private global::System.Data.DataColumn columnprecision_point;
            
            private global::System.Data.DataColumn columntype_color;
            
            private global::System.Data.DataColumn columnmin_color;
            
            private global::System.Data.DataColumn columnmin_val;
            
            private global::System.Data.DataColumn columnmax_color;
            
            private global::System.Data.DataColumn columnmax_val;
            
            private global::System.Data.DataColumn columnuse_min_val;
            
            private global::System.Data.DataColumn columnnull_color;
            
            private global::System.Data.DataColumn columnuse_null_color;
            
            private global::System.Data.DataColumn columnhidden;
            
            private global::System.Data.DataColumn columnuse_max_val;
            
            private global::System.Data.DataColumn columnlabel_showframe;
            
            private global::System.Data.DataColumn columnlabel_framecolor;
            
            private global::System.Data.DataColumn columnlabel_parallel;
            
            private global::System.Data.DataColumn columnlabel_overlap;
            
            private global::System.Data.DataColumn columnlabel_usebounds;
            
            private global::System.Data.DataColumn columnlabel_minscale;
            
            private global::System.Data.DataColumn columnlabel_maxscale;
            
            private global::System.Data.DataColumn columnlabel_offset;
            
            private global::System.Data.DataColumn columnlabel_graphicunits;
            
            private global::System.Data.DataColumn columnlabel_fontname;
            
            private global::System.Data.DataColumn columnlabel_fontcolor;
            
            private global::System.Data.DataColumn columnlabel_fontsize;
            
            private global::System.Data.DataColumn columnlabel_fontstrikeout;
            
            private global::System.Data.DataColumn columnlabel_fontitalic;
            
            private global::System.Data.DataColumn columnlabel_fontunderline;
            
            private global::System.Data.DataColumn columnlabel_fontbold;
            
            private global::System.Data.DataColumn columnlabel_uselabelstyle;
            
            private global::System.Data.DataColumn columnlabel_showlabel;
            
            private global::System.Data.DataColumn columnmin_object_size;
            
            private global::System.Data.DataColumn columnref_table;
            
            private global::System.Data.DataColumn columngraphic_units;
            
            private global::System.Data.DataColumn columndisplay_when_opening;
            
            private global::System.Data.DataColumn columnshowlinesdirections;
            
            private global::System.Data.DataColumn columnhas_history;
            
            private global::System.Data.DataColumn columnsymbol_opacity;
            
            private global::System.Data.DataColumn columnlabel_expression;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_infoDataTable() {
                this.TableName = "table_info";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal table_infoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected table_infoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn scheme_nameColumn {
                get {
                    return this.columnscheme_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn name_dbColumn {
                get {
                    return this.columnname_db;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn name_mapColumn {
                get {
                    return this.columnname_map;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn lablefiledColumn {
                get {
                    return this.columnlablefiled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn map_styleColumn {
                get {
                    return this.columnmap_style;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn geom_fieldColumn {
                get {
                    return this.columngeom_field;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn style_fieldColumn {
                get {
                    return this.columnstyle_field;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn geom_typeColumn {
                get {
                    return this.columngeom_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn default_styleColumn {
                get {
                    return this.columndefault_style;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn fontnameColumn {
                get {
                    return this.columnfontname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn fontcolorColumn {
                get {
                    return this.columnfontcolor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn fontframecolorColumn {
                get {
                    return this.columnfontframecolor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn fontsizeColumn {
                get {
                    return this.columnfontsize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn symbolColumn {
                get {
                    return this.columnsymbol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn pencolorColumn {
                get {
                    return this.columnpencolor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn pentypeColumn {
                get {
                    return this.columnpentype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn penwidthColumn {
                get {
                    return this.columnpenwidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn brushbgcolorColumn {
                get {
                    return this.columnbrushbgcolor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn brushfgcolorColumn {
                get {
                    return this.columnbrushfgcolor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn brushstyleColumn {
                get {
                    return this.columnbrushstyle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn brushhatchColumn {
                get {
                    return this.columnbrushhatch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn read_onlyColumn {
                get {
                    return this.columnread_only;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn photoColumn {
                get {
                    return this.columnphoto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn id_styleColumn {
                get {
                    return this.columnid_style;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn pk_fileldColumn {
                get {
                    return this.columnpk_fileld;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn is_styleColumn {
                get {
                    return this.columnis_style;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn source_layerColumn {
                get {
                    return this.columnsource_layer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn image_columnColumn {
                get {
                    return this.columnimage_column;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn angle_columnColumn {
                get {
                    return this.columnangle_column;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn use_boundsColumn {
                get {
                    return this.columnuse_bounds;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn min_scaleColumn {
                get {
                    return this.columnmin_scale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn max_scaleColumn {
                get {
                    return this.columnmax_scale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn id_groupColumn {
                get {
                    return this.columnid_group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn default_visiblColumn {
                get {
                    return this.columndefault_visibl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn sql_view_stringColumn {
                get {
                    return this.columnsql_view_string;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn order_numColumn {
                get {
                    return this.columnorder_num;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn view_nameColumn {
                get {
                    return this.columnview_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn masterdb_history_idColumn {
                get {
                    return this.columnmasterdb_history_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn connection_stringColumn {
                get {
                    return this.columnconnection_string;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn remote_lgnColumn {
                get {
                    return this.columnremote_lgn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn remote_pwdColumn {
                get {
                    return this.columnremote_pwd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn fixed_history_idColumn {
                get {
                    return this.columnfixed_history_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn range_colorsColumn {
                get {
                    return this.columnrange_colors;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn range_columnColumn {
                get {
                    return this.columnrange_column;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn precision_pointColumn {
                get {
                    return this.columnprecision_point;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn type_colorColumn {
                get {
                    return this.columntype_color;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn min_colorColumn {
                get {
                    return this.columnmin_color;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn min_valColumn {
                get {
                    return this.columnmin_val;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn max_colorColumn {
                get {
                    return this.columnmax_color;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn max_valColumn {
                get {
                    return this.columnmax_val;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn use_min_valColumn {
                get {
                    return this.columnuse_min_val;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn null_colorColumn {
                get {
                    return this.columnnull_color;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn use_null_colorColumn {
                get {
                    return this.columnuse_null_color;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn hiddenColumn {
                get {
                    return this.columnhidden;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn use_max_valColumn {
                get {
                    return this.columnuse_max_val;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_showframeColumn {
                get {
                    return this.columnlabel_showframe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_framecolorColumn {
                get {
                    return this.columnlabel_framecolor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_parallelColumn {
                get {
                    return this.columnlabel_parallel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_overlapColumn {
                get {
                    return this.columnlabel_overlap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_useboundsColumn {
                get {
                    return this.columnlabel_usebounds;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_minscaleColumn {
                get {
                    return this.columnlabel_minscale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_maxscaleColumn {
                get {
                    return this.columnlabel_maxscale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_offsetColumn {
                get {
                    return this.columnlabel_offset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_graphicunitsColumn {
                get {
                    return this.columnlabel_graphicunits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_fontnameColumn {
                get {
                    return this.columnlabel_fontname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_fontcolorColumn {
                get {
                    return this.columnlabel_fontcolor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_fontsizeColumn {
                get {
                    return this.columnlabel_fontsize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_fontstrikeoutColumn {
                get {
                    return this.columnlabel_fontstrikeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_fontitalicColumn {
                get {
                    return this.columnlabel_fontitalic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_fontunderlineColumn {
                get {
                    return this.columnlabel_fontunderline;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_fontboldColumn {
                get {
                    return this.columnlabel_fontbold;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_uselabelstyleColumn {
                get {
                    return this.columnlabel_uselabelstyle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_showlabelColumn {
                get {
                    return this.columnlabel_showlabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn min_object_sizeColumn {
                get {
                    return this.columnmin_object_size;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ref_tableColumn {
                get {
                    return this.columnref_table;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn graphic_unitsColumn {
                get {
                    return this.columngraphic_units;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn display_when_openingColumn {
                get {
                    return this.columndisplay_when_opening;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn showlinesdirectionsColumn {
                get {
                    return this.columnshowlinesdirections;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn has_historyColumn {
                get {
                    return this.columnhas_history;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn symbol_opacityColumn {
                get {
                    return this.columnsymbol_opacity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn label_expressionColumn {
                get {
                    return this.columnlabel_expression;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_infoRow this[int index] {
                get {
                    return ((table_infoRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_infoRowChangeEventHandler table_infoRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_infoRowChangeEventHandler table_infoRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_infoRowChangeEventHandler table_infoRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event table_infoRowChangeEventHandler table_infoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Addtable_infoRow(table_infoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_infoRow Addtable_infoRow(
                        string scheme_name, 
                        string name_db, 
                        string name_map, 
                        string lablefiled, 
                        bool map_style, 
                        string geom_field, 
                        string style_field, 
                        int geom_type, 
                        int type, 
                        bool default_style, 
                        string fontname, 
                        int fontcolor, 
                        int fontframecolor, 
                        int fontsize, 
                        int symbol, 
                        int pencolor, 
                        int pentype, 
                        int penwidth, 
                        long brushbgcolor, 
                        long brushfgcolor, 
                        int brushstyle, 
                        int brushhatch, 
                        bool read_only, 
                        bool photo, 
                        int id_style, 
                        string pk_fileld, 
                        bool is_style, 
                        bool source_layer, 
                        string image_column, 
                        string angle_column, 
                        bool use_bounds, 
                        int min_scale, 
                        int max_scale, 
                        int id_group, 
                        bool default_visibl, 
                        string sql_view_string, 
                        int order_num, 
                        string view_name, 
                        int masterdb_history_id, 
                        string connection_string, 
                        string remote_lgn, 
                        string remote_pwd, 
                        int fixed_history_id, 
                        bool range_colors, 
                        string range_column, 
                        int precision_point, 
                        int type_color, 
                        long min_color, 
                        int min_val, 
                        long max_color, 
                        int max_val, 
                        bool use_min_val, 
                        long null_color, 
                        bool use_null_color, 
                        bool hidden, 
                        bool use_max_val, 
                        bool label_showframe, 
                        int label_framecolor, 
                        bool label_parallel, 
                        bool label_overlap, 
                        bool label_usebounds, 
                        int label_minscale, 
                        int label_maxscale, 
                        int label_offset, 
                        bool label_graphicunits, 
                        string label_fontname, 
                        int label_fontcolor, 
                        int label_fontsize, 
                        bool label_fontstrikeout, 
                        bool label_fontitalic, 
                        bool label_fontunderline, 
                        bool label_fontbold, 
                        bool label_uselabelstyle, 
                        bool label_showlabel, 
                        int min_object_size, 
                        int ref_table, 
                        bool graphic_units, 
                        bool display_when_opening, 
                        bool showlinesdirections, 
                        bool has_history, 
                        int symbol_opacity, 
                        string label_expression) {
                table_infoRow rowtable_infoRow = ((table_infoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        scheme_name,
                        name_db,
                        name_map,
                        lablefiled,
                        map_style,
                        geom_field,
                        style_field,
                        geom_type,
                        type,
                        default_style,
                        fontname,
                        fontcolor,
                        fontframecolor,
                        fontsize,
                        symbol,
                        pencolor,
                        pentype,
                        penwidth,
                        brushbgcolor,
                        brushfgcolor,
                        brushstyle,
                        brushhatch,
                        read_only,
                        photo,
                        id_style,
                        pk_fileld,
                        is_style,
                        source_layer,
                        image_column,
                        angle_column,
                        use_bounds,
                        min_scale,
                        max_scale,
                        id_group,
                        default_visibl,
                        sql_view_string,
                        order_num,
                        view_name,
                        masterdb_history_id,
                        connection_string,
                        remote_lgn,
                        remote_pwd,
                        fixed_history_id,
                        range_colors,
                        range_column,
                        precision_point,
                        type_color,
                        min_color,
                        min_val,
                        max_color,
                        max_val,
                        use_min_val,
                        null_color,
                        use_null_color,
                        hidden,
                        use_max_val,
                        label_showframe,
                        label_framecolor,
                        label_parallel,
                        label_overlap,
                        label_usebounds,
                        label_minscale,
                        label_maxscale,
                        label_offset,
                        label_graphicunits,
                        label_fontname,
                        label_fontcolor,
                        label_fontsize,
                        label_fontstrikeout,
                        label_fontitalic,
                        label_fontunderline,
                        label_fontbold,
                        label_uselabelstyle,
                        label_showlabel,
                        min_object_size,
                        ref_table,
                        graphic_units,
                        display_when_opening,
                        showlinesdirections,
                        has_history,
                        symbol_opacity,
                        label_expression};
                rowtable_infoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtable_infoRow);
                return rowtable_infoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_infoRow FindByid(int id) {
                return ((table_infoRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                table_infoDataTable cln = ((table_infoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new table_infoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnscheme_name = base.Columns["scheme_name"];
                this.columnname_db = base.Columns["name_db"];
                this.columnname_map = base.Columns["name_map"];
                this.columnlablefiled = base.Columns["lablefiled"];
                this.columnmap_style = base.Columns["map_style"];
                this.columngeom_field = base.Columns["geom_field"];
                this.columnstyle_field = base.Columns["style_field"];
                this.columngeom_type = base.Columns["geom_type"];
                this.columntype = base.Columns["type"];
                this.columndefault_style = base.Columns["default_style"];
                this.columnfontname = base.Columns["fontname"];
                this.columnfontcolor = base.Columns["fontcolor"];
                this.columnfontframecolor = base.Columns["fontframecolor"];
                this.columnfontsize = base.Columns["fontsize"];
                this.columnsymbol = base.Columns["symbol"];
                this.columnpencolor = base.Columns["pencolor"];
                this.columnpentype = base.Columns["pentype"];
                this.columnpenwidth = base.Columns["penwidth"];
                this.columnbrushbgcolor = base.Columns["brushbgcolor"];
                this.columnbrushfgcolor = base.Columns["brushfgcolor"];
                this.columnbrushstyle = base.Columns["brushstyle"];
                this.columnbrushhatch = base.Columns["brushhatch"];
                this.columnread_only = base.Columns["read_only"];
                this.columnphoto = base.Columns["photo"];
                this.columnid_style = base.Columns["id_style"];
                this.columnpk_fileld = base.Columns["pk_fileld"];
                this.columnis_style = base.Columns["is_style"];
                this.columnsource_layer = base.Columns["source_layer"];
                this.columnimage_column = base.Columns["image_column"];
                this.columnangle_column = base.Columns["angle_column"];
                this.columnuse_bounds = base.Columns["use_bounds"];
                this.columnmin_scale = base.Columns["min_scale"];
                this.columnmax_scale = base.Columns["max_scale"];
                this.columnid_group = base.Columns["id_group"];
                this.columndefault_visibl = base.Columns["default_visibl"];
                this.columnsql_view_string = base.Columns["sql_view_string"];
                this.columnorder_num = base.Columns["order_num"];
                this.columnview_name = base.Columns["view_name"];
                this.columnmasterdb_history_id = base.Columns["masterdb_history_id"];
                this.columnconnection_string = base.Columns["connection_string"];
                this.columnremote_lgn = base.Columns["remote_lgn"];
                this.columnremote_pwd = base.Columns["remote_pwd"];
                this.columnfixed_history_id = base.Columns["fixed_history_id"];
                this.columnrange_colors = base.Columns["range_colors"];
                this.columnrange_column = base.Columns["range_column"];
                this.columnprecision_point = base.Columns["precision_point"];
                this.columntype_color = base.Columns["type_color"];
                this.columnmin_color = base.Columns["min_color"];
                this.columnmin_val = base.Columns["min_val"];
                this.columnmax_color = base.Columns["max_color"];
                this.columnmax_val = base.Columns["max_val"];
                this.columnuse_min_val = base.Columns["use_min_val"];
                this.columnnull_color = base.Columns["null_color"];
                this.columnuse_null_color = base.Columns["use_null_color"];
                this.columnhidden = base.Columns["hidden"];
                this.columnuse_max_val = base.Columns["use_max_val"];
                this.columnlabel_showframe = base.Columns["label_showframe"];
                this.columnlabel_framecolor = base.Columns["label_framecolor"];
                this.columnlabel_parallel = base.Columns["label_parallel"];
                this.columnlabel_overlap = base.Columns["label_overlap"];
                this.columnlabel_usebounds = base.Columns["label_usebounds"];
                this.columnlabel_minscale = base.Columns["label_minscale"];
                this.columnlabel_maxscale = base.Columns["label_maxscale"];
                this.columnlabel_offset = base.Columns["label_offset"];
                this.columnlabel_graphicunits = base.Columns["label_graphicunits"];
                this.columnlabel_fontname = base.Columns["label_fontname"];
                this.columnlabel_fontcolor = base.Columns["label_fontcolor"];
                this.columnlabel_fontsize = base.Columns["label_fontsize"];
                this.columnlabel_fontstrikeout = base.Columns["label_fontstrikeout"];
                this.columnlabel_fontitalic = base.Columns["label_fontitalic"];
                this.columnlabel_fontunderline = base.Columns["label_fontunderline"];
                this.columnlabel_fontbold = base.Columns["label_fontbold"];
                this.columnlabel_uselabelstyle = base.Columns["label_uselabelstyle"];
                this.columnlabel_showlabel = base.Columns["label_showlabel"];
                this.columnmin_object_size = base.Columns["min_object_size"];
                this.columnref_table = base.Columns["ref_table"];
                this.columngraphic_units = base.Columns["graphic_units"];
                this.columndisplay_when_opening = base.Columns["display_when_opening"];
                this.columnshowlinesdirections = base.Columns["showlinesdirections"];
                this.columnhas_history = base.Columns["has_history"];
                this.columnsymbol_opacity = base.Columns["symbol_opacity"];
                this.columnlabel_expression = base.Columns["label_expression"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnscheme_name = new global::System.Data.DataColumn("scheme_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscheme_name);
                this.columnname_db = new global::System.Data.DataColumn("name_db", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname_db);
                this.columnname_map = new global::System.Data.DataColumn("name_map", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname_map);
                this.columnlablefiled = new global::System.Data.DataColumn("lablefiled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlablefiled);
                this.columnmap_style = new global::System.Data.DataColumn("map_style", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmap_style);
                this.columngeom_field = new global::System.Data.DataColumn("geom_field", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngeom_field);
                this.columnstyle_field = new global::System.Data.DataColumn("style_field", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstyle_field);
                this.columngeom_type = new global::System.Data.DataColumn("geom_type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngeom_type);
                this.columntype = new global::System.Data.DataColumn("type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columndefault_style = new global::System.Data.DataColumn("default_style", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndefault_style);
                this.columnfontname = new global::System.Data.DataColumn("fontname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfontname);
                this.columnfontcolor = new global::System.Data.DataColumn("fontcolor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfontcolor);
                this.columnfontframecolor = new global::System.Data.DataColumn("fontframecolor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfontframecolor);
                this.columnfontsize = new global::System.Data.DataColumn("fontsize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfontsize);
                this.columnsymbol = new global::System.Data.DataColumn("symbol", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsymbol);
                this.columnpencolor = new global::System.Data.DataColumn("pencolor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpencolor);
                this.columnpentype = new global::System.Data.DataColumn("pentype", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpentype);
                this.columnpenwidth = new global::System.Data.DataColumn("penwidth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpenwidth);
                this.columnbrushbgcolor = new global::System.Data.DataColumn("brushbgcolor", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbrushbgcolor);
                this.columnbrushfgcolor = new global::System.Data.DataColumn("brushfgcolor", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbrushfgcolor);
                this.columnbrushstyle = new global::System.Data.DataColumn("brushstyle", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbrushstyle);
                this.columnbrushhatch = new global::System.Data.DataColumn("brushhatch", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbrushhatch);
                this.columnread_only = new global::System.Data.DataColumn("read_only", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnread_only);
                this.columnphoto = new global::System.Data.DataColumn("photo", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphoto);
                this.columnid_style = new global::System.Data.DataColumn("id_style", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_style);
                this.columnpk_fileld = new global::System.Data.DataColumn("pk_fileld", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpk_fileld);
                this.columnis_style = new global::System.Data.DataColumn("is_style", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnis_style);
                this.columnsource_layer = new global::System.Data.DataColumn("source_layer", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_layer);
                this.columnimage_column = new global::System.Data.DataColumn("image_column", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnimage_column);
                this.columnangle_column = new global::System.Data.DataColumn("angle_column", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnangle_column);
                this.columnuse_bounds = new global::System.Data.DataColumn("use_bounds", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuse_bounds);
                this.columnmin_scale = new global::System.Data.DataColumn("min_scale", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmin_scale);
                this.columnmax_scale = new global::System.Data.DataColumn("max_scale", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmax_scale);
                this.columnid_group = new global::System.Data.DataColumn("id_group", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_group);
                this.columndefault_visibl = new global::System.Data.DataColumn("default_visibl", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndefault_visibl);
                this.columnsql_view_string = new global::System.Data.DataColumn("sql_view_string", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsql_view_string);
                this.columnorder_num = new global::System.Data.DataColumn("order_num", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnorder_num);
                this.columnview_name = new global::System.Data.DataColumn("view_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnview_name);
                this.columnmasterdb_history_id = new global::System.Data.DataColumn("masterdb_history_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmasterdb_history_id);
                this.columnconnection_string = new global::System.Data.DataColumn("connection_string", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnection_string);
                this.columnremote_lgn = new global::System.Data.DataColumn("remote_lgn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnremote_lgn);
                this.columnremote_pwd = new global::System.Data.DataColumn("remote_pwd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnremote_pwd);
                this.columnfixed_history_id = new global::System.Data.DataColumn("fixed_history_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfixed_history_id);
                this.columnrange_colors = new global::System.Data.DataColumn("range_colors", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrange_colors);
                this.columnrange_column = new global::System.Data.DataColumn("range_column", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrange_column);
                this.columnprecision_point = new global::System.Data.DataColumn("precision_point", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprecision_point);
                this.columntype_color = new global::System.Data.DataColumn("type_color", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype_color);
                this.columnmin_color = new global::System.Data.DataColumn("min_color", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmin_color);
                this.columnmin_val = new global::System.Data.DataColumn("min_val", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmin_val);
                this.columnmax_color = new global::System.Data.DataColumn("max_color", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmax_color);
                this.columnmax_val = new global::System.Data.DataColumn("max_val", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmax_val);
                this.columnuse_min_val = new global::System.Data.DataColumn("use_min_val", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuse_min_val);
                this.columnnull_color = new global::System.Data.DataColumn("null_color", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnull_color);
                this.columnuse_null_color = new global::System.Data.DataColumn("use_null_color", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuse_null_color);
                this.columnhidden = new global::System.Data.DataColumn("hidden", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhidden);
                this.columnuse_max_val = new global::System.Data.DataColumn("use_max_val", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuse_max_val);
                this.columnlabel_showframe = new global::System.Data.DataColumn("label_showframe", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_showframe);
                this.columnlabel_framecolor = new global::System.Data.DataColumn("label_framecolor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_framecolor);
                this.columnlabel_parallel = new global::System.Data.DataColumn("label_parallel", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_parallel);
                this.columnlabel_overlap = new global::System.Data.DataColumn("label_overlap", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_overlap);
                this.columnlabel_usebounds = new global::System.Data.DataColumn("label_usebounds", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_usebounds);
                this.columnlabel_minscale = new global::System.Data.DataColumn("label_minscale", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_minscale);
                this.columnlabel_maxscale = new global::System.Data.DataColumn("label_maxscale", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_maxscale);
                this.columnlabel_offset = new global::System.Data.DataColumn("label_offset", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_offset);
                this.columnlabel_graphicunits = new global::System.Data.DataColumn("label_graphicunits", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_graphicunits);
                this.columnlabel_fontname = new global::System.Data.DataColumn("label_fontname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_fontname);
                this.columnlabel_fontcolor = new global::System.Data.DataColumn("label_fontcolor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_fontcolor);
                this.columnlabel_fontsize = new global::System.Data.DataColumn("label_fontsize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_fontsize);
                this.columnlabel_fontstrikeout = new global::System.Data.DataColumn("label_fontstrikeout", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_fontstrikeout);
                this.columnlabel_fontitalic = new global::System.Data.DataColumn("label_fontitalic", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_fontitalic);
                this.columnlabel_fontunderline = new global::System.Data.DataColumn("label_fontunderline", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_fontunderline);
                this.columnlabel_fontbold = new global::System.Data.DataColumn("label_fontbold", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_fontbold);
                this.columnlabel_uselabelstyle = new global::System.Data.DataColumn("label_uselabelstyle", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_uselabelstyle);
                this.columnlabel_showlabel = new global::System.Data.DataColumn("label_showlabel", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_showlabel);
                this.columnmin_object_size = new global::System.Data.DataColumn("min_object_size", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmin_object_size);
                this.columnref_table = new global::System.Data.DataColumn("ref_table", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnref_table);
                this.columngraphic_units = new global::System.Data.DataColumn("graphic_units", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngraphic_units);
                this.columndisplay_when_opening = new global::System.Data.DataColumn("display_when_opening", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndisplay_when_opening);
                this.columnshowlinesdirections = new global::System.Data.DataColumn("showlinesdirections", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshowlinesdirections);
                this.columnhas_history = new global::System.Data.DataColumn("has_history", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhas_history);
                this.columnsymbol_opacity = new global::System.Data.DataColumn("symbol_opacity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsymbol_opacity);
                this.columnlabel_expression = new global::System.Data.DataColumn("label_expression", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabel_expression);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = -1;
                this.columnid.AutoIncrementStep = -1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnname_db.AllowDBNull = false;
                this.columnname_map.AllowDBNull = false;
                this.columnmap_style.AllowDBNull = false;
                this.columngeom_field.AllowDBNull = false;
                this.columnstyle_field.AllowDBNull = false;
                this.columngeom_type.AllowDBNull = false;
                this.columntype.AllowDBNull = false;
                this.columndefault_style.AllowDBNull = false;
                this.columnread_only.AllowDBNull = false;
                this.columnpk_fileld.AllowDBNull = false;
                this.columnid_group.AllowDBNull = false;
                this.columnhidden.AllowDBNull = false;
                this.columnlabel_showframe.AllowDBNull = false;
                this.columnlabel_framecolor.AllowDBNull = false;
                this.columnlabel_parallel.AllowDBNull = false;
                this.columnlabel_overlap.AllowDBNull = false;
                this.columnlabel_usebounds.AllowDBNull = false;
                this.columnlabel_minscale.AllowDBNull = false;
                this.columnlabel_maxscale.AllowDBNull = false;
                this.columnlabel_offset.AllowDBNull = false;
                this.columnlabel_graphicunits.AllowDBNull = false;
                this.columnlabel_fontname.AllowDBNull = false;
                this.columnlabel_fontcolor.AllowDBNull = false;
                this.columnlabel_fontsize.AllowDBNull = false;
                this.columnlabel_fontstrikeout.AllowDBNull = false;
                this.columnlabel_fontitalic.AllowDBNull = false;
                this.columnlabel_fontunderline.AllowDBNull = false;
                this.columnlabel_fontbold.AllowDBNull = false;
                this.columnlabel_uselabelstyle.AllowDBNull = false;
                this.columnlabel_showlabel.AllowDBNull = false;
                this.columnmin_object_size.AllowDBNull = false;
                this.columndisplay_when_opening.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_infoRow Newtable_infoRow() {
                return ((table_infoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new table_infoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(table_infoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.table_infoRowChanged != null)) {
                    this.table_infoRowChanged(this, new table_infoRowChangeEvent(((table_infoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.table_infoRowChanging != null)) {
                    this.table_infoRowChanging(this, new table_infoRowChangeEvent(((table_infoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.table_infoRowDeleted != null)) {
                    this.table_infoRowDeleted(this, new table_infoRowChangeEvent(((table_infoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.table_infoRowDeleting != null)) {
                    this.table_infoRowDeleting(this, new table_infoRowChangeEvent(((table_infoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Removetable_infoRow(table_infoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                inf_regionDataSet ds = new inf_regionDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "table_infoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class table_groupsRow : global::System.Data.DataRow {
            
            private table_groupsDataTable tabletable_groups;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal table_groupsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletable_groups = ((table_groupsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id {
                get {
                    return ((int)(this[this.tabletable_groups.idColumn]));
                }
                set {
                    this[this.tabletable_groups.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string name_group {
                get {
                    try {
                        return ((string)(this[this.tabletable_groups.name_groupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name_group\' in table \'table_groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_groups.name_groupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string descript {
                get {
                    try {
                        return ((string)(this[this.tabletable_groups.descriptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'descript\' in table \'table_groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_groups.descriptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int order_num {
                get {
                    try {
                        return ((int)(this[this.tabletable_groups.order_numColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'order_num\' in table \'table_groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_groups.order_numColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groups_tableRow table_groups_tableRow {
                get {
                    return ((table_groups_tableRow)(this.GetParentRow(this.Table.ParentRelations["table_groups_table_table_groups"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["table_groups_table_table_groups"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isname_groupNull() {
                return this.IsNull(this.tabletable_groups.name_groupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setname_groupNull() {
                this[this.tabletable_groups.name_groupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdescriptNull() {
                return this.IsNull(this.tabletable_groups.descriptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdescriptNull() {
                this[this.tabletable_groups.descriptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isorder_numNull() {
                return this.IsNull(this.tabletable_groups.order_numColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setorder_numNull() {
                this[this.tabletable_groups.order_numColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class table_groups_tableRow : global::System.Data.DataRow {
            
            private table_groups_tableDataTable tabletable_groups_table;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal table_groups_tableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletable_groups_table = ((table_groups_tableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id_table {
                get {
                    return ((int)(this[this.tabletable_groups_table.id_tableColumn]));
                }
                set {
                    this[this.tabletable_groups_table.id_tableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id_group {
                get {
                    return ((int)(this[this.tabletable_groups_table.id_groupColumn]));
                }
                set {
                    this[this.tabletable_groups_table.id_groupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int order_num {
                get {
                    try {
                        return ((int)(this[this.tabletable_groups_table.order_numColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'order_num\' in table \'table_groups_table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_groups_table.order_numColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_infoRow table_infoRow {
                get {
                    return ((table_infoRow)(this.GetParentRow(this.Table.ParentRelations["table_info_table_groups_table"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["table_info_table_groups_table"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isorder_numNull() {
                return this.IsNull(this.tabletable_groups_table.order_numColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setorder_numNull() {
                this[this.tabletable_groups_table.order_numColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groupsRow[] Gettable_groupsRows() {
                if ((this.Table.ChildRelations["table_groups_table_table_groups"] == null)) {
                    return new table_groupsRow[0];
                }
                else {
                    return ((table_groupsRow[])(base.GetChildRows(this.Table.ChildRelations["table_groups_table_table_groups"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class table_infoRow : global::System.Data.DataRow {
            
            private table_infoDataTable tabletable_info;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal table_infoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletable_info = ((table_infoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id {
                get {
                    return ((int)(this[this.tabletable_info.idColumn]));
                }
                set {
                    this[this.tabletable_info.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string scheme_name {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.scheme_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scheme_name\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.scheme_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string name_db {
                get {
                    return ((string)(this[this.tabletable_info.name_dbColumn]));
                }
                set {
                    this[this.tabletable_info.name_dbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string name_map {
                get {
                    return ((string)(this[this.tabletable_info.name_mapColumn]));
                }
                set {
                    this[this.tabletable_info.name_mapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string lablefiled {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.lablefiledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lablefiled\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.lablefiledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool map_style {
                get {
                    return ((bool)(this[this.tabletable_info.map_styleColumn]));
                }
                set {
                    this[this.tabletable_info.map_styleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string geom_field {
                get {
                    return ((string)(this[this.tabletable_info.geom_fieldColumn]));
                }
                set {
                    this[this.tabletable_info.geom_fieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string style_field {
                get {
                    return ((string)(this[this.tabletable_info.style_fieldColumn]));
                }
                set {
                    this[this.tabletable_info.style_fieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int geom_type {
                get {
                    return ((int)(this[this.tabletable_info.geom_typeColumn]));
                }
                set {
                    this[this.tabletable_info.geom_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int type {
                get {
                    return ((int)(this[this.tabletable_info.typeColumn]));
                }
                set {
                    this[this.tabletable_info.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool default_style {
                get {
                    return ((bool)(this[this.tabletable_info.default_styleColumn]));
                }
                set {
                    this[this.tabletable_info.default_styleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string fontname {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.fontnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fontname\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.fontnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int fontcolor {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.fontcolorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fontcolor\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.fontcolorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int fontframecolor {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.fontframecolorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fontframecolor\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.fontframecolorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int fontsize {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.fontsizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fontsize\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.fontsizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int symbol {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.symbolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'symbol\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.symbolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int pencolor {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.pencolorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pencolor\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.pencolorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int pentype {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.pentypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pentype\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.pentypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int penwidth {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.penwidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'penwidth\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.penwidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long brushbgcolor {
                get {
                    try {
                        return ((long)(this[this.tabletable_info.brushbgcolorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'brushbgcolor\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.brushbgcolorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long brushfgcolor {
                get {
                    try {
                        return ((long)(this[this.tabletable_info.brushfgcolorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'brushfgcolor\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.brushfgcolorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int brushstyle {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.brushstyleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'brushstyle\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.brushstyleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int brushhatch {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.brushhatchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'brushhatch\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.brushhatchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool read_only {
                get {
                    return ((bool)(this[this.tabletable_info.read_onlyColumn]));
                }
                set {
                    this[this.tabletable_info.read_onlyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool photo {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.photoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'photo\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.photoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id_style {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.id_styleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id_style\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.id_styleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string pk_fileld {
                get {
                    return ((string)(this[this.tabletable_info.pk_fileldColumn]));
                }
                set {
                    this[this.tabletable_info.pk_fileldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool is_style {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.is_styleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'is_style\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.is_styleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool source_layer {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.source_layerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source_layer\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.source_layerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string image_column {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.image_columnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'image_column\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.image_columnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string angle_column {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.angle_columnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'angle_column\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.angle_columnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool use_bounds {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.use_boundsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'use_bounds\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.use_boundsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int min_scale {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.min_scaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'min_scale\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.min_scaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int max_scale {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.max_scaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'max_scale\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.max_scaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id_group {
                get {
                    return ((int)(this[this.tabletable_info.id_groupColumn]));
                }
                set {
                    this[this.tabletable_info.id_groupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool default_visibl {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.default_visiblColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'default_visibl\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.default_visiblColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string sql_view_string {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.sql_view_stringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sql_view_string\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.sql_view_stringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int order_num {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.order_numColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'order_num\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.order_numColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string view_name {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.view_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'view_name\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.view_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int masterdb_history_id {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.masterdb_history_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'masterdb_history_id\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.masterdb_history_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string connection_string {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.connection_stringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connection_string\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.connection_stringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string remote_lgn {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.remote_lgnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'remote_lgn\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.remote_lgnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string remote_pwd {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.remote_pwdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'remote_pwd\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.remote_pwdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int fixed_history_id {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.fixed_history_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fixed_history_id\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.fixed_history_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool range_colors {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.range_colorsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'range_colors\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.range_colorsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string range_column {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.range_columnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'range_column\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.range_columnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int precision_point {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.precision_pointColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'precision_point\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.precision_pointColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int type_color {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.type_colorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type_color\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.type_colorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long min_color {
                get {
                    try {
                        return ((long)(this[this.tabletable_info.min_colorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'min_color\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.min_colorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int min_val {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.min_valColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'min_val\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.min_valColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long max_color {
                get {
                    try {
                        return ((long)(this[this.tabletable_info.max_colorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'max_color\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.max_colorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int max_val {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.max_valColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'max_val\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.max_valColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool use_min_val {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.use_min_valColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'use_min_val\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.use_min_valColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public long null_color {
                get {
                    try {
                        return ((long)(this[this.tabletable_info.null_colorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'null_color\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.null_colorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool use_null_color {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.use_null_colorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'use_null_color\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.use_null_colorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool hidden {
                get {
                    return ((bool)(this[this.tabletable_info.hiddenColumn]));
                }
                set {
                    this[this.tabletable_info.hiddenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool use_max_val {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.use_max_valColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'use_max_val\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.use_max_valColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_showframe {
                get {
                    return ((bool)(this[this.tabletable_info.label_showframeColumn]));
                }
                set {
                    this[this.tabletable_info.label_showframeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int label_framecolor {
                get {
                    return ((int)(this[this.tabletable_info.label_framecolorColumn]));
                }
                set {
                    this[this.tabletable_info.label_framecolorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_parallel {
                get {
                    return ((bool)(this[this.tabletable_info.label_parallelColumn]));
                }
                set {
                    this[this.tabletable_info.label_parallelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_overlap {
                get {
                    return ((bool)(this[this.tabletable_info.label_overlapColumn]));
                }
                set {
                    this[this.tabletable_info.label_overlapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_usebounds {
                get {
                    return ((bool)(this[this.tabletable_info.label_useboundsColumn]));
                }
                set {
                    this[this.tabletable_info.label_useboundsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int label_minscale {
                get {
                    return ((int)(this[this.tabletable_info.label_minscaleColumn]));
                }
                set {
                    this[this.tabletable_info.label_minscaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int label_maxscale {
                get {
                    return ((int)(this[this.tabletable_info.label_maxscaleColumn]));
                }
                set {
                    this[this.tabletable_info.label_maxscaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int label_offset {
                get {
                    return ((int)(this[this.tabletable_info.label_offsetColumn]));
                }
                set {
                    this[this.tabletable_info.label_offsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_graphicunits {
                get {
                    return ((bool)(this[this.tabletable_info.label_graphicunitsColumn]));
                }
                set {
                    this[this.tabletable_info.label_graphicunitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string label_fontname {
                get {
                    return ((string)(this[this.tabletable_info.label_fontnameColumn]));
                }
                set {
                    this[this.tabletable_info.label_fontnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int label_fontcolor {
                get {
                    return ((int)(this[this.tabletable_info.label_fontcolorColumn]));
                }
                set {
                    this[this.tabletable_info.label_fontcolorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int label_fontsize {
                get {
                    return ((int)(this[this.tabletable_info.label_fontsizeColumn]));
                }
                set {
                    this[this.tabletable_info.label_fontsizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_fontstrikeout {
                get {
                    return ((bool)(this[this.tabletable_info.label_fontstrikeoutColumn]));
                }
                set {
                    this[this.tabletable_info.label_fontstrikeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_fontitalic {
                get {
                    return ((bool)(this[this.tabletable_info.label_fontitalicColumn]));
                }
                set {
                    this[this.tabletable_info.label_fontitalicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_fontunderline {
                get {
                    return ((bool)(this[this.tabletable_info.label_fontunderlineColumn]));
                }
                set {
                    this[this.tabletable_info.label_fontunderlineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_fontbold {
                get {
                    return ((bool)(this[this.tabletable_info.label_fontboldColumn]));
                }
                set {
                    this[this.tabletable_info.label_fontboldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_uselabelstyle {
                get {
                    return ((bool)(this[this.tabletable_info.label_uselabelstyleColumn]));
                }
                set {
                    this[this.tabletable_info.label_uselabelstyleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool label_showlabel {
                get {
                    return ((bool)(this[this.tabletable_info.label_showlabelColumn]));
                }
                set {
                    this[this.tabletable_info.label_showlabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int min_object_size {
                get {
                    return ((int)(this[this.tabletable_info.min_object_sizeColumn]));
                }
                set {
                    this[this.tabletable_info.min_object_sizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int ref_table {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.ref_tableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ref_table\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.ref_tableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool graphic_units {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.graphic_unitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'graphic_units\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.graphic_unitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool display_when_opening {
                get {
                    return ((bool)(this[this.tabletable_info.display_when_openingColumn]));
                }
                set {
                    this[this.tabletable_info.display_when_openingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool showlinesdirections {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.showlinesdirectionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'showlinesdirections\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.showlinesdirectionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool has_history {
                get {
                    try {
                        return ((bool)(this[this.tabletable_info.has_historyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'has_history\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.has_historyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int symbol_opacity {
                get {
                    try {
                        return ((int)(this[this.tabletable_info.symbol_opacityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'symbol_opacity\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.symbol_opacityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string label_expression {
                get {
                    try {
                        return ((string)(this[this.tabletable_info.label_expressionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'label_expression\' in table \'table_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable_info.label_expressionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isscheme_nameNull() {
                return this.IsNull(this.tabletable_info.scheme_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setscheme_nameNull() {
                this[this.tabletable_info.scheme_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IslablefiledNull() {
                return this.IsNull(this.tabletable_info.lablefiledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetlablefiledNull() {
                this[this.tabletable_info.lablefiledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfontnameNull() {
                return this.IsNull(this.tabletable_info.fontnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfontnameNull() {
                this[this.tabletable_info.fontnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfontcolorNull() {
                return this.IsNull(this.tabletable_info.fontcolorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfontcolorNull() {
                this[this.tabletable_info.fontcolorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfontframecolorNull() {
                return this.IsNull(this.tabletable_info.fontframecolorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfontframecolorNull() {
                this[this.tabletable_info.fontframecolorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsfontsizeNull() {
                return this.IsNull(this.tabletable_info.fontsizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetfontsizeNull() {
                this[this.tabletable_info.fontsizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IssymbolNull() {
                return this.IsNull(this.tabletable_info.symbolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetsymbolNull() {
                this[this.tabletable_info.symbolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspencolorNull() {
                return this.IsNull(this.tabletable_info.pencolorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpencolorNull() {
                this[this.tabletable_info.pencolorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspentypeNull() {
                return this.IsNull(this.tabletable_info.pentypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpentypeNull() {
                this[this.tabletable_info.pentypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspenwidthNull() {
                return this.IsNull(this.tabletable_info.penwidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpenwidthNull() {
                this[this.tabletable_info.penwidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsbrushbgcolorNull() {
                return this.IsNull(this.tabletable_info.brushbgcolorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetbrushbgcolorNull() {
                this[this.tabletable_info.brushbgcolorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsbrushfgcolorNull() {
                return this.IsNull(this.tabletable_info.brushfgcolorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetbrushfgcolorNull() {
                this[this.tabletable_info.brushfgcolorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsbrushstyleNull() {
                return this.IsNull(this.tabletable_info.brushstyleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetbrushstyleNull() {
                this[this.tabletable_info.brushstyleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsbrushhatchNull() {
                return this.IsNull(this.tabletable_info.brushhatchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetbrushhatchNull() {
                this[this.tabletable_info.brushhatchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsphotoNull() {
                return this.IsNull(this.tabletable_info.photoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetphotoNull() {
                this[this.tabletable_info.photoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isid_styleNull() {
                return this.IsNull(this.tabletable_info.id_styleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setid_styleNull() {
                this[this.tabletable_info.id_styleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isis_styleNull() {
                return this.IsNull(this.tabletable_info.is_styleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setis_styleNull() {
                this[this.tabletable_info.is_styleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issource_layerNull() {
                return this.IsNull(this.tabletable_info.source_layerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsource_layerNull() {
                this[this.tabletable_info.source_layerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isimage_columnNull() {
                return this.IsNull(this.tabletable_info.image_columnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setimage_columnNull() {
                this[this.tabletable_info.image_columnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isangle_columnNull() {
                return this.IsNull(this.tabletable_info.angle_columnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setangle_columnNull() {
                this[this.tabletable_info.angle_columnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isuse_boundsNull() {
                return this.IsNull(this.tabletable_info.use_boundsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setuse_boundsNull() {
                this[this.tabletable_info.use_boundsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ismin_scaleNull() {
                return this.IsNull(this.tabletable_info.min_scaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setmin_scaleNull() {
                this[this.tabletable_info.min_scaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ismax_scaleNull() {
                return this.IsNull(this.tabletable_info.max_scaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setmax_scaleNull() {
                this[this.tabletable_info.max_scaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isdefault_visiblNull() {
                return this.IsNull(this.tabletable_info.default_visiblColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setdefault_visiblNull() {
                this[this.tabletable_info.default_visiblColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issql_view_stringNull() {
                return this.IsNull(this.tabletable_info.sql_view_stringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsql_view_stringNull() {
                this[this.tabletable_info.sql_view_stringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isorder_numNull() {
                return this.IsNull(this.tabletable_info.order_numColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setorder_numNull() {
                this[this.tabletable_info.order_numColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isview_nameNull() {
                return this.IsNull(this.tabletable_info.view_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setview_nameNull() {
                this[this.tabletable_info.view_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ismasterdb_history_idNull() {
                return this.IsNull(this.tabletable_info.masterdb_history_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setmasterdb_history_idNull() {
                this[this.tabletable_info.masterdb_history_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isconnection_stringNull() {
                return this.IsNull(this.tabletable_info.connection_stringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setconnection_stringNull() {
                this[this.tabletable_info.connection_stringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isremote_lgnNull() {
                return this.IsNull(this.tabletable_info.remote_lgnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setremote_lgnNull() {
                this[this.tabletable_info.remote_lgnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isremote_pwdNull() {
                return this.IsNull(this.tabletable_info.remote_pwdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setremote_pwdNull() {
                this[this.tabletable_info.remote_pwdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isfixed_history_idNull() {
                return this.IsNull(this.tabletable_info.fixed_history_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setfixed_history_idNull() {
                this[this.tabletable_info.fixed_history_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isrange_colorsNull() {
                return this.IsNull(this.tabletable_info.range_colorsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setrange_colorsNull() {
                this[this.tabletable_info.range_colorsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isrange_columnNull() {
                return this.IsNull(this.tabletable_info.range_columnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setrange_columnNull() {
                this[this.tabletable_info.range_columnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isprecision_pointNull() {
                return this.IsNull(this.tabletable_info.precision_pointColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setprecision_pointNull() {
                this[this.tabletable_info.precision_pointColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Istype_colorNull() {
                return this.IsNull(this.tabletable_info.type_colorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Settype_colorNull() {
                this[this.tabletable_info.type_colorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ismin_colorNull() {
                return this.IsNull(this.tabletable_info.min_colorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setmin_colorNull() {
                this[this.tabletable_info.min_colorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ismin_valNull() {
                return this.IsNull(this.tabletable_info.min_valColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setmin_valNull() {
                this[this.tabletable_info.min_valColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ismax_colorNull() {
                return this.IsNull(this.tabletable_info.max_colorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setmax_colorNull() {
                this[this.tabletable_info.max_colorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ismax_valNull() {
                return this.IsNull(this.tabletable_info.max_valColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setmax_valNull() {
                this[this.tabletable_info.max_valColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isuse_min_valNull() {
                return this.IsNull(this.tabletable_info.use_min_valColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setuse_min_valNull() {
                this[this.tabletable_info.use_min_valColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isnull_colorNull() {
                return this.IsNull(this.tabletable_info.null_colorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setnull_colorNull() {
                this[this.tabletable_info.null_colorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isuse_null_colorNull() {
                return this.IsNull(this.tabletable_info.use_null_colorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setuse_null_colorNull() {
                this[this.tabletable_info.use_null_colorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isuse_max_valNull() {
                return this.IsNull(this.tabletable_info.use_max_valColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setuse_max_valNull() {
                this[this.tabletable_info.use_max_valColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isref_tableNull() {
                return this.IsNull(this.tabletable_info.ref_tableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setref_tableNull() {
                this[this.tabletable_info.ref_tableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isgraphic_unitsNull() {
                return this.IsNull(this.tabletable_info.graphic_unitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setgraphic_unitsNull() {
                this[this.tabletable_info.graphic_unitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsshowlinesdirectionsNull() {
                return this.IsNull(this.tabletable_info.showlinesdirectionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetshowlinesdirectionsNull() {
                this[this.tabletable_info.showlinesdirectionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ishas_historyNull() {
                return this.IsNull(this.tabletable_info.has_historyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Sethas_historyNull() {
                this[this.tabletable_info.has_historyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Issymbol_opacityNull() {
                return this.IsNull(this.tabletable_info.symbol_opacityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setsymbol_opacityNull() {
                this[this.tabletable_info.symbol_opacityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Islabel_expressionNull() {
                return this.IsNull(this.tabletable_info.label_expressionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setlabel_expressionNull() {
                this[this.tabletable_info.label_expressionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groups_tableRow[] Gettable_groups_tableRows() {
                if ((this.Table.ChildRelations["table_info_table_groups_table"] == null)) {
                    return new table_groups_tableRow[0];
                }
                else {
                    return ((table_groups_tableRow[])(base.GetChildRows(this.Table.ChildRelations["table_info_table_groups_table"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class table_groupsRowChangeEvent : global::System.EventArgs {
            
            private table_groupsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groupsRowChangeEvent(table_groupsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groupsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class table_groups_tableRowChangeEvent : global::System.EventArgs {
            
            private table_groups_tableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groups_tableRowChangeEvent(table_groups_tableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_groups_tableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class table_infoRowChangeEvent : global::System.EventArgs {
            
            private table_infoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_infoRowChangeEvent(table_infoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public table_infoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace MapMonitor.inf_regionDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class table_groupsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Npgsql.NpgsqlDataAdapter _adapter;
        
        private global::Npgsql.NpgsqlConnection _connection;
        
        private global::Npgsql.NpgsqlTransaction _transaction;
        
        private global::Npgsql.NpgsqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public table_groupsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Npgsql.NpgsqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Npgsql.NpgsqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Npgsql.NpgsqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Npgsql.NpgsqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Npgsql.NpgsqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Npgsql.NpgsqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "table_groups";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("name_group", "name_group");
            tableMapping.ColumnMappings.Add("descript", "descript");
            tableMapping.ColumnMappings.Add("order_num", "order_num");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Npgsql.NpgsqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""inf_region"".""sys_scheme"".""table_groups"" WHERE ((""id"" = @Original_id) AND ((@IsNull_name_group = 1 AND ""name_group"" IS NULL) OR (""name_group"" = @Original_name_group)) AND ((@IsNull_descript = 1 AND ""descript"" IS NULL) OR (""descript"" = @Original_descript)) AND ((@IsNull_order_num = 1 AND ""order_num"" IS NULL) OR (""order_num"" = @Original_order_num)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Npgsql.NpgsqlParameter param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_name_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "name_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_name_group";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_descript";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "descript";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_descript";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "descript";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Npgsql.NpgsqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"inf_region\".\"sys_scheme\".\"table_groups\" (\"name_group\", \"descript\", \"" +
                "order_num\") VALUES (@name_group, @descript, @order_num)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@name_group";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_group";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@descript";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "descript";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Npgsql.NpgsqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""inf_region"".""sys_scheme"".""table_groups"" SET ""name_group"" = @name_group, ""descript"" = @descript, ""order_num"" = @order_num WHERE ((""id"" = @Original_id) AND ((@IsNull_name_group = 1 AND ""name_group"" IS NULL) OR (""name_group"" = @Original_name_group)) AND ((@IsNull_descript = 1 AND ""descript"" IS NULL) OR (""descript"" = @Original_descript)) AND ((@IsNull_order_num = 1 AND ""order_num"" IS NULL) OR (""order_num"" = @Original_order_num)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@name_group";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_group";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@descript";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "descript";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_name_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "name_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_name_group";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_descript";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "descript";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_descript";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "descript";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Npgsql.NpgsqlConnection();
            this._connection.ConnectionString = global::MapMonitor.Properties.Settings.Default.inf_region_ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Npgsql.NpgsqlCommand[1];
            this._commandCollection[0] = new global::Npgsql.NpgsqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT \"id\", \"name_group\", \"descript\", \"order_num\" FROM \"sys_scheme\".\"table_group" +
                "s\"";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(inf_regionDataSet.table_groupsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual inf_regionDataSet.table_groupsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            inf_regionDataSet.table_groupsDataTable dataTable = new inf_regionDataSet.table_groupsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(inf_regionDataSet.table_groupsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(inf_regionDataSet dataSet) {
            return this.Adapter.Update(dataSet, "table_groups");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int @Original_id, string @Original_name_group, string @Original_descript, global::System.Nullable<int> @Original_order_num) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(@Original_id));
            if ((@Original_name_group == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(@Original_name_group));
            }
            if ((@Original_descript == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(@Original_descript));
            }
            if ((@Original_order_num.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(@Original_order_num.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string @name_group, string @descript, global::System.Nullable<int> @order_num) {
            if ((@name_group == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(@name_group));
            }
            if ((@descript == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(@descript));
            }
            if ((@order_num.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(@order_num.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string @name_group, string @descript, global::System.Nullable<int> @order_num, int @Original_id, string @Original_name_group, string @Original_descript, global::System.Nullable<int> @Original_order_num) {
            if ((@name_group == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(@name_group));
            }
            if ((@descript == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(@descript));
            }
            if ((@order_num.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(@order_num.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(@Original_id));
            if ((@Original_name_group == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(@Original_name_group));
            }
            if ((@Original_descript == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(@Original_descript));
            }
            if ((@Original_order_num.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(@Original_order_num.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class table_groups_tableTableAdapter : global::System.ComponentModel.Component {
        
        private global::Npgsql.NpgsqlDataAdapter _adapter;
        
        private global::Npgsql.NpgsqlConnection _connection;
        
        private global::Npgsql.NpgsqlTransaction _transaction;
        
        private global::Npgsql.NpgsqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public table_groups_tableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Npgsql.NpgsqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Npgsql.NpgsqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Npgsql.NpgsqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Npgsql.NpgsqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Npgsql.NpgsqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Npgsql.NpgsqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "table_groups_table";
            tableMapping.ColumnMappings.Add("id_table", "id_table");
            tableMapping.ColumnMappings.Add("id_group", "id_group");
            tableMapping.ColumnMappings.Add("order_num", "order_num");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Npgsql.NpgsqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"inf_region\".\"sys_scheme\".\"table_groups_table\" WHERE ((\"id_table\" = @" +
                "Original_id_table) AND (\"id_group\" = @Original_id_group) AND ((@IsNull_order_num" +
                " = 1 AND \"order_num\" IS NULL) OR (\"order_num\" = @Original_order_num)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Npgsql.NpgsqlParameter param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id_table";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_table";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Npgsql.NpgsqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"inf_region\".\"sys_scheme\".\"table_groups_table\" (\"id_table\", \"id_group" +
                "\", \"order_num\") VALUES (@id_table, @id_group, @order_num)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@id_table";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_table";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@id_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_group";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Npgsql.NpgsqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""inf_region"".""sys_scheme"".""table_groups_table"" SET ""id_table"" = @id_table, ""id_group"" = @id_group, ""order_num"" = @order_num WHERE ((""id_table"" = @Original_id_table) AND (""id_group"" = @Original_id_group) AND ((@IsNull_order_num = 1 AND ""order_num"" IS NULL) OR (""order_num"" = @Original_order_num)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@id_table";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_table";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@id_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_group";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id_table";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_table";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Npgsql.NpgsqlConnection();
            this._connection.ConnectionString = global::MapMonitor.Properties.Settings.Default.inf_region_ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Npgsql.NpgsqlCommand[1];
            this._commandCollection[0] = new global::Npgsql.NpgsqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT \"id_table\", \"id_group\", \"order_num\" FROM \"sys_scheme\".\"table_groups_table\"" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(inf_regionDataSet.table_groups_tableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual inf_regionDataSet.table_groups_tableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            inf_regionDataSet.table_groups_tableDataTable dataTable = new inf_regionDataSet.table_groups_tableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(inf_regionDataSet.table_groups_tableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(inf_regionDataSet dataSet) {
            return this.Adapter.Update(dataSet, "table_groups_table");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int @Original_id_table, int @Original_id_group, global::System.Nullable<int> @Original_order_num) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(@Original_id_table));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(@Original_id_group));
            if ((@Original_order_num.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(@Original_order_num.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int @id_table, int @id_group, global::System.Nullable<int> @order_num) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(@id_table));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(@id_group));
            if ((@order_num.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(@order_num.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int @id_table, int @id_group, global::System.Nullable<int> @order_num, int @Original_id_table, int @Original_id_group, global::System.Nullable<int> @Original_order_num) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(@id_table));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(@id_group));
            if ((@order_num.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(@order_num.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(@Original_id_table));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(@Original_id_group));
            if ((@Original_order_num.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(@Original_order_num.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> @order_num, int @Original_id_table, int @Original_id_group, global::System.Nullable<int> @Original_order_num) {
            return this.Update(@Original_id_table, @Original_id_group, @order_num, @Original_id_table, @Original_id_group, @Original_order_num);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class table_infoTableAdapter : global::System.ComponentModel.Component {
        
        private global::Npgsql.NpgsqlDataAdapter _adapter;
        
        private global::Npgsql.NpgsqlConnection _connection;
        
        private global::Npgsql.NpgsqlTransaction _transaction;
        
        private global::Npgsql.NpgsqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public table_infoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::Npgsql.NpgsqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Npgsql.NpgsqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Npgsql.NpgsqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::Npgsql.NpgsqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::Npgsql.NpgsqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Npgsql.NpgsqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "table_info";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("scheme_name", "scheme_name");
            tableMapping.ColumnMappings.Add("name_db", "name_db");
            tableMapping.ColumnMappings.Add("name_map", "name_map");
            tableMapping.ColumnMappings.Add("lablefiled", "lablefiled");
            tableMapping.ColumnMappings.Add("map_style", "map_style");
            tableMapping.ColumnMappings.Add("geom_field", "geom_field");
            tableMapping.ColumnMappings.Add("style_field", "style_field");
            tableMapping.ColumnMappings.Add("geom_type", "geom_type");
            tableMapping.ColumnMappings.Add("type", "type");
            tableMapping.ColumnMappings.Add("default_style", "default_style");
            tableMapping.ColumnMappings.Add("fontname", "fontname");
            tableMapping.ColumnMappings.Add("fontcolor", "fontcolor");
            tableMapping.ColumnMappings.Add("fontframecolor", "fontframecolor");
            tableMapping.ColumnMappings.Add("fontsize", "fontsize");
            tableMapping.ColumnMappings.Add("symbol", "symbol");
            tableMapping.ColumnMappings.Add("pencolor", "pencolor");
            tableMapping.ColumnMappings.Add("pentype", "pentype");
            tableMapping.ColumnMappings.Add("penwidth", "penwidth");
            tableMapping.ColumnMappings.Add("brushbgcolor", "brushbgcolor");
            tableMapping.ColumnMappings.Add("brushfgcolor", "brushfgcolor");
            tableMapping.ColumnMappings.Add("brushstyle", "brushstyle");
            tableMapping.ColumnMappings.Add("brushhatch", "brushhatch");
            tableMapping.ColumnMappings.Add("read_only", "read_only");
            tableMapping.ColumnMappings.Add("photo", "photo");
            tableMapping.ColumnMappings.Add("id_style", "id_style");
            tableMapping.ColumnMappings.Add("pk_fileld", "pk_fileld");
            tableMapping.ColumnMappings.Add("is_style", "is_style");
            tableMapping.ColumnMappings.Add("source_layer", "source_layer");
            tableMapping.ColumnMappings.Add("image_column", "image_column");
            tableMapping.ColumnMappings.Add("angle_column", "angle_column");
            tableMapping.ColumnMappings.Add("use_bounds", "use_bounds");
            tableMapping.ColumnMappings.Add("min_scale", "min_scale");
            tableMapping.ColumnMappings.Add("max_scale", "max_scale");
            tableMapping.ColumnMappings.Add("id_group", "id_group");
            tableMapping.ColumnMappings.Add("default_visibl", "default_visibl");
            tableMapping.ColumnMappings.Add("sql_view_string", "sql_view_string");
            tableMapping.ColumnMappings.Add("order_num", "order_num");
            tableMapping.ColumnMappings.Add("view_name", "view_name");
            tableMapping.ColumnMappings.Add("masterdb_history_id", "masterdb_history_id");
            tableMapping.ColumnMappings.Add("connection_string", "connection_string");
            tableMapping.ColumnMappings.Add("remote_lgn", "remote_lgn");
            tableMapping.ColumnMappings.Add("remote_pwd", "remote_pwd");
            tableMapping.ColumnMappings.Add("fixed_history_id", "fixed_history_id");
            tableMapping.ColumnMappings.Add("range_colors", "range_colors");
            tableMapping.ColumnMappings.Add("range_column", "range_column");
            tableMapping.ColumnMappings.Add("precision_point", "precision_point");
            tableMapping.ColumnMappings.Add("type_color", "type_color");
            tableMapping.ColumnMappings.Add("min_color", "min_color");
            tableMapping.ColumnMappings.Add("min_val", "min_val");
            tableMapping.ColumnMappings.Add("max_color", "max_color");
            tableMapping.ColumnMappings.Add("max_val", "max_val");
            tableMapping.ColumnMappings.Add("use_min_val", "use_min_val");
            tableMapping.ColumnMappings.Add("null_color", "null_color");
            tableMapping.ColumnMappings.Add("use_null_color", "use_null_color");
            tableMapping.ColumnMappings.Add("hidden", "hidden");
            tableMapping.ColumnMappings.Add("use_max_val", "use_max_val");
            tableMapping.ColumnMappings.Add("label_showframe", "label_showframe");
            tableMapping.ColumnMappings.Add("label_framecolor", "label_framecolor");
            tableMapping.ColumnMappings.Add("label_parallel", "label_parallel");
            tableMapping.ColumnMappings.Add("label_overlap", "label_overlap");
            tableMapping.ColumnMappings.Add("label_usebounds", "label_usebounds");
            tableMapping.ColumnMappings.Add("label_minscale", "label_minscale");
            tableMapping.ColumnMappings.Add("label_maxscale", "label_maxscale");
            tableMapping.ColumnMappings.Add("label_offset", "label_offset");
            tableMapping.ColumnMappings.Add("label_graphicunits", "label_graphicunits");
            tableMapping.ColumnMappings.Add("label_fontname", "label_fontname");
            tableMapping.ColumnMappings.Add("label_fontcolor", "label_fontcolor");
            tableMapping.ColumnMappings.Add("label_fontsize", "label_fontsize");
            tableMapping.ColumnMappings.Add("label_fontstrikeout", "label_fontstrikeout");
            tableMapping.ColumnMappings.Add("label_fontitalic", "label_fontitalic");
            tableMapping.ColumnMappings.Add("label_fontunderline", "label_fontunderline");
            tableMapping.ColumnMappings.Add("label_fontbold", "label_fontbold");
            tableMapping.ColumnMappings.Add("label_uselabelstyle", "label_uselabelstyle");
            tableMapping.ColumnMappings.Add("label_showlabel", "label_showlabel");
            tableMapping.ColumnMappings.Add("min_object_size", "min_object_size");
            tableMapping.ColumnMappings.Add("ref_table", "ref_table");
            tableMapping.ColumnMappings.Add("graphic_units", "graphic_units");
            tableMapping.ColumnMappings.Add("display_when_opening", "display_when_opening");
            tableMapping.ColumnMappings.Add("showlinesdirections", "showlinesdirections");
            tableMapping.ColumnMappings.Add("has_history", "has_history");
            tableMapping.ColumnMappings.Add("symbol_opacity", "symbol_opacity");
            tableMapping.ColumnMappings.Add("label_expression", "label_expression");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Npgsql.NpgsqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"inf_region\".\"sys_scheme\".\"table_info\" WHERE ((\"id\" = @Original_id) A" +
                "ND ((@IsNull_scheme_name = 1 AND \"scheme_name\" IS NULL) OR (\"scheme_name\" = @Ori" +
                "ginal_scheme_name)) AND (\"name_db\" = @Original_name_db) AND (\"name_map\" = @Origi" +
                "nal_name_map) AND ((@IsNull_lablefiled = 1 AND \"lablefiled\" IS NULL) OR (\"lablef" +
                "iled\" = @Original_lablefiled)) AND (\"map_style\" = @Original_map_style) AND (\"geo" +
                "m_field\" = @Original_geom_field) AND (\"style_field\" = @Original_style_field) AND" +
                " (\"geom_type\" = @Original_geom_type) AND (\"type\" = @Original_type) AND (\"default" +
                "_style\" = @Original_default_style) AND ((@IsNull_fontname = 1 AND \"fontname\" IS " +
                "NULL) OR (\"fontname\" = @Original_fontname)) AND ((@IsNull_fontcolor = 1 AND \"fon" +
                "tcolor\" IS NULL) OR (\"fontcolor\" = @Original_fontcolor)) AND ((@IsNull_fontframe" +
                "color = 1 AND \"fontframecolor\" IS NULL) OR (\"fontframecolor\" = @Original_fontfra" +
                "mecolor)) AND ((@IsNull_fontsize = 1 AND \"fontsize\" IS NULL) OR (\"fontsize\" = @O" +
                "riginal_fontsize)) AND ((@IsNull_symbol = 1 AND \"symbol\" IS NULL) OR (\"symbol\" =" +
                " @Original_symbol)) AND ((@IsNull_pencolor = 1 AND \"pencolor\" IS NULL) OR (\"penc" +
                "olor\" = @Original_pencolor)) AND ((@IsNull_pentype = 1 AND \"pentype\" IS NULL) OR" +
                " (\"pentype\" = @Original_pentype)) AND ((@IsNull_penwidth = 1 AND \"penwidth\" IS N" +
                "ULL) OR (\"penwidth\" = @Original_penwidth)) AND ((@IsNull_brushbgcolor = 1 AND \"b" +
                "rushbgcolor\" IS NULL) OR (\"brushbgcolor\" = @Original_brushbgcolor)) AND ((@IsNul" +
                "l_brushfgcolor = 1 AND \"brushfgcolor\" IS NULL) OR (\"brushfgcolor\" = @Original_br" +
                "ushfgcolor)) AND ((@IsNull_brushstyle = 1 AND \"brushstyle\" IS NULL) OR (\"brushst" +
                "yle\" = @Original_brushstyle)) AND ((@IsNull_brushhatch = 1 AND \"brushhatch\" IS N" +
                "ULL) OR (\"brushhatch\" = @Original_brushhatch)) AND (\"read_only\" = @Original_read" +
                "_only) AND ((@IsNull_photo = 1 AND \"photo\" IS NULL) OR (\"photo\" = @Original_phot" +
                "o)) AND ((@IsNull_id_style = 1 AND \"id_style\" IS NULL) OR (\"id_style\" = @Origina" +
                "l_id_style)) AND (\"pk_fileld\" = @Original_pk_fileld) AND ((@IsNull_is_style = 1 " +
                "AND \"is_style\" IS NULL) OR (\"is_style\" = @Original_is_style)) AND ((@IsNull_sour" +
                "ce_layer = 1 AND \"source_layer\" IS NULL) OR (\"source_layer\" = @Original_source_l" +
                "ayer)) AND ((@IsNull_image_column = 1 AND \"image_column\" IS NULL) OR (\"image_col" +
                "umn\" = @Original_image_column)) AND ((@IsNull_angle_column = 1 AND \"angle_column" +
                "\" IS NULL) OR (\"angle_column\" = @Original_angle_column)) AND ((@IsNull_use_bound" +
                "s = 1 AND \"use_bounds\" IS NULL) OR (\"use_bounds\" = @Original_use_bounds)) AND ((" +
                "@IsNull_min_scale = 1 AND \"min_scale\" IS NULL) OR (\"min_scale\" = @Original_min_s" +
                "cale)) AND ((@IsNull_max_scale = 1 AND \"max_scale\" IS NULL) OR (\"max_scale\" = @O" +
                "riginal_max_scale)) AND (\"id_group\" = @Original_id_group) AND ((@IsNull_default_" +
                "visibl = 1 AND \"default_visibl\" IS NULL) OR (\"default_visibl\" = @Original_defaul" +
                "t_visibl)) AND ((@IsNull_sql_view_string = 1 AND \"sql_view_string\" IS NULL) OR (" +
                "\"sql_view_string\" = @Original_sql_view_string)) AND ((@IsNull_order_num = 1 AND " +
                "\"order_num\" IS NULL) OR (\"order_num\" = @Original_order_num)) AND ((@IsNull_view_" +
                "name = 1 AND \"view_name\" IS NULL) OR (\"view_name\" = @Original_view_name)) AND ((" +
                "@IsNull_masterdb_history_id = 1 AND \"masterdb_history_id\" IS NULL) OR (\"masterdb" +
                "_history_id\" = @Original_masterdb_history_id)) AND ((@IsNull_connection_string =" +
                " 1 AND \"connection_string\" IS NULL) OR (\"connection_string\" = @Original_connecti" +
                "on_string)) AND ((@IsNull_remote_lgn = 1 AND \"remote_lgn\" IS NULL) OR (\"remote_l" +
                "gn\" = @Original_remote_lgn)) AND ((@IsNull_remote_pwd = 1 AND \"remote_pwd\" IS NU" +
                "LL) OR (\"remote_pwd\" = @Original_remote_pwd)) AND ((@IsNull_fixed_history_id = 1" +
                " AND \"fixed_history_id\" IS NULL) OR (\"fixed_history_id\" = @Original_fixed_histor" +
                "y_id)) AND ((@IsNull_range_colors = 1 AND \"range_colors\" IS NULL) OR (\"range_col" +
                "ors\" = @Original_range_colors)) AND ((@IsNull_range_column = 1 AND \"range_column" +
                "\" IS NULL) OR (\"range_column\" = @Original_range_column)) AND ((@IsNull_precision" +
                "_point = 1 AND \"precision_point\" IS NULL) OR (\"precision_point\" = @Original_prec" +
                "ision_point)) AND ((@IsNull_type_color = 1 AND \"type_color\" IS NULL) OR (\"type_c" +
                "olor\" = @Original_type_color)) AND ((@IsNull_min_color = 1 AND \"min_color\" IS NU" +
                "LL) OR (\"min_color\" = @Original_min_color)) AND ((@IsNull_min_val = 1 AND \"min_v" +
                "al\" IS NULL) OR (\"min_val\" = @Original_min_val)) AND ((@IsNull_max_color = 1 AND" +
                " \"max_color\" IS NULL) OR (\"max_color\" = @Original_max_color)) AND ((@IsNull_max_" +
                "val = 1 AND \"max_val\" IS NULL) OR (\"max_val\" = @Original_max_val)) AND ((@IsNull" +
                "_use_min_val = 1 AND \"use_min_val\" IS NULL) OR (\"use_min_val\" = @Original_use_mi" +
                "n_val)) AND ((@IsNull_null_color = 1 AND \"null_color\" IS NULL) OR (\"null_color\" " +
                "= @Original_null_color)) AND ((@IsNull_use_null_color = 1 AND \"use_null_color\" I" +
                "S NULL) OR (\"use_null_color\" = @Original_use_null_color)) AND (\"hidden\" = @Origi" +
                "nal_hidden) AND ((@IsNull_use_max_val = 1 AND \"use_max_val\" IS NULL) OR (\"use_ma" +
                "x_val\" = @Original_use_max_val)) AND (\"label_showframe\" = @Original_label_showfr" +
                "ame) AND (\"label_framecolor\" = @Original_label_framecolor) AND (\"label_parallel\"" +
                " = @Original_label_parallel) AND (\"label_overlap\" = @Original_label_overlap) AND" +
                " (\"label_usebounds\" = @Original_label_usebounds) AND (\"label_minscale\" = @Origin" +
                "al_label_minscale) AND (\"label_maxscale\" = @Original_label_maxscale) AND (\"label" +
                "_offset\" = @Original_label_offset) AND (\"label_graphicunits\" = @Original_label_g" +
                "raphicunits) AND (\"label_fontname\" = @Original_label_fontname) AND (\"label_fontc" +
                "olor\" = @Original_label_fontcolor) AND (\"label_fontsize\" = @Original_label_fonts" +
                "ize) AND (\"label_fontstrikeout\" = @Original_label_fontstrikeout) AND (\"label_fon" +
                "titalic\" = @Original_label_fontitalic) AND (\"label_fontunderline\" = @Original_la" +
                "bel_fontunderline) AND (\"label_fontbold\" = @Original_label_fontbold) AND (\"label" +
                "_uselabelstyle\" = @Original_label_uselabelstyle) AND (\"label_showlabel\" = @Origi" +
                "nal_label_showlabel) AND (\"min_object_size\" = @Original_min_object_size) AND ((@" +
                "IsNull_ref_table = 1 AND \"ref_table\" IS NULL) OR (\"ref_table\" = @Original_ref_ta" +
                "ble)) AND ((@IsNull_graphic_units = 1 AND \"graphic_units\" IS NULL) OR (\"graphic_" +
                "units\" = @Original_graphic_units)) AND (\"display_when_opening\" = @Original_displ" +
                "ay_when_opening) AND ((@IsNull_showlinesdirections = 1 AND \"showlinesdirections\"" +
                " IS NULL) OR (\"showlinesdirections\" = @Original_showlinesdirections)) AND ((@IsN" +
                "ull_has_history = 1 AND \"has_history\" IS NULL) OR (\"has_history\" = @Original_has" +
                "_history)) AND ((@IsNull_symbol_opacity = 1 AND \"symbol_opacity\" IS NULL) OR (\"s" +
                "ymbol_opacity\" = @Original_symbol_opacity)) AND ((@IsNull_label_expression = 1 A" +
                "ND \"label_expression\" IS NULL) OR (\"label_expression\" = @Original_label_expressi" +
                "on)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Npgsql.NpgsqlParameter param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_scheme_name";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "scheme_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_scheme_name";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "scheme_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_name_db";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_db";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_name_map";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_map";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_lablefiled";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "lablefiled";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_lablefiled";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "lablefiled";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_map_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "map_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_geom_field";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "geom_field";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_style_field";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "style_field";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_geom_type";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "geom_type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_type";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_default_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "default_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_fontname";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_fontname";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "fontname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_fontcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_fontcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_fontframecolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontframecolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_fontframecolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontframecolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_fontsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontsize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_fontsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontsize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_symbol";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_symbol";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_pencolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pencolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_pencolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pencolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_pentype";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pentype";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_pentype";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pentype";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_penwidth";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "penwidth";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_penwidth";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "penwidth";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_brushbgcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushbgcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_brushbgcolor";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "brushbgcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_brushfgcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushfgcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_brushfgcolor";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "brushfgcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_brushstyle";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushstyle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_brushstyle";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushstyle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_brushhatch";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushhatch";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_brushhatch";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushhatch";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_read_only";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "read_only";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_photo";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "photo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_photo";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "photo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_id_style";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id_style";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_pk_fileld";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "pk_fileld";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_is_style";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "is_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_is_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "is_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_source_layer";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "source_layer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_source_layer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "source_layer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_image_column";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "image_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_image_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "image_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_angle_column";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "angle_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_angle_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "angle_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_use_bounds";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "use_bounds";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_use_bounds";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_bounds";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_min_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_scale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_min_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_scale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_max_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_scale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_max_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_scale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_default_visibl";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "default_visibl";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_default_visibl";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "default_visibl";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_sql_view_string";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "sql_view_string";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_sql_view_string";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "sql_view_string";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_view_name";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "view_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_view_name";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "view_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_masterdb_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "masterdb_history_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_masterdb_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "masterdb_history_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_connection_string";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "connection_string";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_connection_string";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "connection_string";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_remote_lgn";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "remote_lgn";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_remote_lgn";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "remote_lgn";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_remote_pwd";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "remote_pwd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_remote_pwd";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "remote_pwd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_fixed_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fixed_history_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_fixed_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fixed_history_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_range_colors";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "range_colors";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_range_colors";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "range_colors";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_range_column";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "range_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_range_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "range_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_precision_point";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "precision_point";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_precision_point";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "precision_point";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_type_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "type_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_type_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "type_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_min_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_min_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "min_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_min_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_min_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_max_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_max_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "max_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_max_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_max_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_use_min_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "use_min_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_use_min_val";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_min_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_null_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "null_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_null_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "null_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_use_null_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "use_null_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_use_null_color";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_null_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_hidden";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "hidden";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_use_max_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "use_max_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_use_max_val";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_max_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_showframe";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_showframe";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_framecolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_framecolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_parallel";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_parallel";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_overlap";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_overlap";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_usebounds";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_usebounds";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_minscale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_minscale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_maxscale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_maxscale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_offset";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_offset";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_graphicunits";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_graphicunits";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontname";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "label_fontname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_fontcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_fontsize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontstrikeout";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontstrikeout";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontitalic";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontitalic";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontunderline";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontunderline";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontbold";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontbold";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_uselabelstyle";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_uselabelstyle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_showlabel";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_showlabel";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_min_object_size";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_object_size";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_ref_table";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "ref_table";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_ref_table";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "ref_table";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_graphic_units";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "graphic_units";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_graphic_units";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "graphic_units";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_display_when_opening";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "display_when_opening";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_showlinesdirections";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "showlinesdirections";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_showlinesdirections";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "showlinesdirections";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_has_history";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "has_history";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_has_history";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "has_history";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_symbol_opacity";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol_opacity";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_symbol_opacity";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol_opacity";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_label_expression";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_expression";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_expression";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "label_expression";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Npgsql.NpgsqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"inf_region\".\"sys_scheme\".\"table_info\" (\"scheme_name\", \"name_db\", \"na" +
                "me_map\", \"lablefiled\", \"map_style\", \"geom_field\", \"style_field\", \"geom_type\", \"t" +
                "ype\", \"default_style\", \"fontname\", \"fontcolor\", \"fontframecolor\", \"fontsize\", \"s" +
                "ymbol\", \"pencolor\", \"pentype\", \"penwidth\", \"brushbgcolor\", \"brushfgcolor\", \"brus" +
                "hstyle\", \"brushhatch\", \"read_only\", \"photo\", \"id_style\", \"pk_fileld\", \"is_style\"" +
                ", \"source_layer\", \"image_column\", \"angle_column\", \"use_bounds\", \"min_scale\", \"ma" +
                "x_scale\", \"id_group\", \"default_visibl\", \"sql_view_string\", \"order_num\", \"view_na" +
                "me\", \"masterdb_history_id\", \"connection_string\", \"remote_lgn\", \"remote_pwd\", \"fi" +
                "xed_history_id\", \"range_colors\", \"range_column\", \"precision_point\", \"type_color\"" +
                ", \"min_color\", \"min_val\", \"max_color\", \"max_val\", \"use_min_val\", \"null_color\", \"" +
                "use_null_color\", \"hidden\", \"use_max_val\", \"label_showframe\", \"label_framecolor\"," +
                " \"label_parallel\", \"label_overlap\", \"label_usebounds\", \"label_minscale\", \"label_" +
                "maxscale\", \"label_offset\", \"label_graphicunits\", \"label_fontname\", \"label_fontco" +
                "lor\", \"label_fontsize\", \"label_fontstrikeout\", \"label_fontitalic\", \"label_fontun" +
                "derline\", \"label_fontbold\", \"label_uselabelstyle\", \"label_showlabel\", \"min_objec" +
                "t_size\", \"ref_table\", \"graphic_units\", \"display_when_opening\", \"showlinesdirecti" +
                "ons\", \"has_history\", \"symbol_opacity\", \"label_expression\") VALUES (@scheme_name," +
                " @name_db, @name_map, @lablefiled, @map_style, @geom_field, @style_field, @geom_" +
                "type, @type, @default_style, @fontname, @fontcolor, @fontframecolor, @fontsize, " +
                "@symbol, @pencolor, @pentype, @penwidth, @brushbgcolor, @brushfgcolor, @brushsty" +
                "le, @brushhatch, @read_only, @photo, @id_style, @pk_fileld, @is_style, @source_l" +
                "ayer, @image_column, @angle_column, @use_bounds, @min_scale, @max_scale, @id_gro" +
                "up, @default_visibl, @sql_view_string, @order_num, @view_name, @masterdb_history" +
                "_id, @connection_string, @remote_lgn, @remote_pwd, @fixed_history_id, @range_col" +
                "ors, @range_column, @precision_point, @type_color, @min_color, @min_val, @max_co" +
                "lor, @max_val, @use_min_val, @null_color, @use_null_color, @hidden, @use_max_val" +
                ", @label_showframe, @label_framecolor, @label_parallel, @label_overlap, @label_u" +
                "sebounds, @label_minscale, @label_maxscale, @label_offset, @label_graphicunits, " +
                "@label_fontname, @label_fontcolor, @label_fontsize, @label_fontstrikeout, @label" +
                "_fontitalic, @label_fontunderline, @label_fontbold, @label_uselabelstyle, @label" +
                "_showlabel, @min_object_size, @ref_table, @graphic_units, @display_when_opening," +
                " @showlinesdirections, @has_history, @symbol_opacity, @label_expression)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@scheme_name";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "scheme_name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@name_db";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_db";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@name_map";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_map";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@lablefiled";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "lablefiled";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@map_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "map_style";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@geom_field";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "geom_field";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@style_field";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "style_field";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@geom_type";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "geom_type";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@type";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "type";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@default_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "default_style";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@fontname";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "fontname";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@fontcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontcolor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@fontframecolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontframecolor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@fontsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontsize";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@symbol";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@pencolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pencolor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@pentype";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pentype";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@penwidth";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "penwidth";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@brushbgcolor";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "brushbgcolor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@brushfgcolor";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "brushfgcolor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@brushstyle";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushstyle";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@brushhatch";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushhatch";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@read_only";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "read_only";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@photo";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "photo";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@id_style";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_style";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@pk_fileld";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "pk_fileld";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@is_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "is_style";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@source_layer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "source_layer";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@image_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "image_column";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@angle_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "angle_column";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@use_bounds";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_bounds";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@min_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_scale";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@max_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_scale";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@id_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_group";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@default_visibl";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "default_visibl";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@sql_view_string";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "sql_view_string";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@view_name";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "view_name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@masterdb_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "masterdb_history_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@connection_string";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "connection_string";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@remote_lgn";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "remote_lgn";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@remote_pwd";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "remote_pwd";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@fixed_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fixed_history_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@range_colors";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "range_colors";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@range_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "range_column";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@precision_point";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "precision_point";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@type_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "type_color";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@min_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "min_color";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@min_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_val";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@max_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "max_color";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@max_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_val";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@use_min_val";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_min_val";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@null_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "null_color";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@use_null_color";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_null_color";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@hidden";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "hidden";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@use_max_val";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_max_val";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_showframe";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_showframe";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_framecolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_framecolor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_parallel";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_parallel";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_overlap";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_overlap";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_usebounds";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_usebounds";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_minscale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_minscale";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_maxscale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_maxscale";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_offset";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_offset";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_graphicunits";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_graphicunits";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontname";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "label_fontname";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_fontcolor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_fontsize";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontstrikeout";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontstrikeout";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontitalic";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontitalic";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontunderline";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontunderline";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontbold";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontbold";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_uselabelstyle";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_uselabelstyle";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_showlabel";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_showlabel";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@min_object_size";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_object_size";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@ref_table";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "ref_table";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@graphic_units";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "graphic_units";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@display_when_opening";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "display_when_opening";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@showlinesdirections";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "showlinesdirections";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@has_history";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "has_history";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@symbol_opacity";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol_opacity";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_expression";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "label_expression";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Npgsql.NpgsqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"inf_region\".\"sys_scheme\".\"table_info\" SET \"scheme_name\" = @scheme_name, \"" +
                "name_db\" = @name_db, \"name_map\" = @name_map, \"lablefiled\" = @lablefiled, \"map_st" +
                "yle\" = @map_style, \"geom_field\" = @geom_field, \"style_field\" = @style_field, \"ge" +
                "om_type\" = @geom_type, \"type\" = @type, \"default_style\" = @default_style, \"fontna" +
                "me\" = @fontname, \"fontcolor\" = @fontcolor, \"fontframecolor\" = @fontframecolor, \"" +
                "fontsize\" = @fontsize, \"symbol\" = @symbol, \"pencolor\" = @pencolor, \"pentype\" = @" +
                "pentype, \"penwidth\" = @penwidth, \"brushbgcolor\" = @brushbgcolor, \"brushfgcolor\" " +
                "= @brushfgcolor, \"brushstyle\" = @brushstyle, \"brushhatch\" = @brushhatch, \"read_o" +
                "nly\" = @read_only, \"photo\" = @photo, \"id_style\" = @id_style, \"pk_fileld\" = @pk_f" +
                "ileld, \"is_style\" = @is_style, \"source_layer\" = @source_layer, \"image_column\" = " +
                "@image_column, \"angle_column\" = @angle_column, \"use_bounds\" = @use_bounds, \"min_" +
                "scale\" = @min_scale, \"max_scale\" = @max_scale, \"id_group\" = @id_group, \"default_" +
                "visibl\" = @default_visibl, \"sql_view_string\" = @sql_view_string, \"order_num\" = @" +
                "order_num, \"view_name\" = @view_name, \"masterdb_history_id\" = @masterdb_history_i" +
                "d, \"connection_string\" = @connection_string, \"remote_lgn\" = @remote_lgn, \"remote" +
                "_pwd\" = @remote_pwd, \"fixed_history_id\" = @fixed_history_id, \"range_colors\" = @r" +
                "ange_colors, \"range_column\" = @range_column, \"precision_point\" = @precision_poin" +
                "t, \"type_color\" = @type_color, \"min_color\" = @min_color, \"min_val\" = @min_val, \"" +
                "max_color\" = @max_color, \"max_val\" = @max_val, \"use_min_val\" = @use_min_val, \"nu" +
                "ll_color\" = @null_color, \"use_null_color\" = @use_null_color, \"hidden\" = @hidden," +
                " \"use_max_val\" = @use_max_val, \"label_showframe\" = @label_showframe, \"label_fram" +
                "ecolor\" = @label_framecolor, \"label_parallel\" = @label_parallel, \"label_overlap\"" +
                " = @label_overlap, \"label_usebounds\" = @label_usebounds, \"label_minscale\" = @lab" +
                "el_minscale, \"label_maxscale\" = @label_maxscale, \"label_offset\" = @label_offset," +
                " \"label_graphicunits\" = @label_graphicunits, \"label_fontname\" = @label_fontname," +
                " \"label_fontcolor\" = @label_fontcolor, \"label_fontsize\" = @label_fontsize, \"labe" +
                "l_fontstrikeout\" = @label_fontstrikeout, \"label_fontitalic\" = @label_fontitalic," +
                " \"label_fontunderline\" = @label_fontunderline, \"label_fontbold\" = @label_fontbol" +
                "d, \"label_uselabelstyle\" = @label_uselabelstyle, \"label_showlabel\" = @label_show" +
                "label, \"min_object_size\" = @min_object_size, \"ref_table\" = @ref_table, \"graphic_" +
                "units\" = @graphic_units, \"display_when_opening\" = @display_when_opening, \"showli" +
                "nesdirections\" = @showlinesdirections, \"has_history\" = @has_history, \"symbol_opa" +
                "city\" = @symbol_opacity, \"label_expression\" = @label_expression WHERE ((\"id\" = @" +
                "Original_id) AND ((@IsNull_scheme_name = 1 AND \"scheme_name\" IS NULL) OR (\"schem" +
                "e_name\" = @Original_scheme_name)) AND (\"name_db\" = @Original_name_db) AND (\"name" +
                "_map\" = @Original_name_map) AND ((@IsNull_lablefiled = 1 AND \"lablefiled\" IS NUL" +
                "L) OR (\"lablefiled\" = @Original_lablefiled)) AND (\"map_style\" = @Original_map_st" +
                "yle) AND (\"geom_field\" = @Original_geom_field) AND (\"style_field\" = @Original_st" +
                "yle_field) AND (\"geom_type\" = @Original_geom_type) AND (\"type\" = @Original_type)" +
                " AND (\"default_style\" = @Original_default_style) AND ((@IsNull_fontname = 1 AND " +
                "\"fontname\" IS NULL) OR (\"fontname\" = @Original_fontname)) AND ((@IsNull_fontcolo" +
                "r = 1 AND \"fontcolor\" IS NULL) OR (\"fontcolor\" = @Original_fontcolor)) AND ((@Is" +
                "Null_fontframecolor = 1 AND \"fontframecolor\" IS NULL) OR (\"fontframecolor\" = @Or" +
                "iginal_fontframecolor)) AND ((@IsNull_fontsize = 1 AND \"fontsize\" IS NULL) OR (\"" +
                "fontsize\" = @Original_fontsize)) AND ((@IsNull_symbol = 1 AND \"symbol\" IS NULL) " +
                "OR (\"symbol\" = @Original_symbol)) AND ((@IsNull_pencolor = 1 AND \"pencolor\" IS N" +
                "ULL) OR (\"pencolor\" = @Original_pencolor)) AND ((@IsNull_pentype = 1 AND \"pentyp" +
                "e\" IS NULL) OR (\"pentype\" = @Original_pentype)) AND ((@IsNull_penwidth = 1 AND \"" +
                "penwidth\" IS NULL) OR (\"penwidth\" = @Original_penwidth)) AND ((@IsNull_brushbgco" +
                "lor = 1 AND \"brushbgcolor\" IS NULL) OR (\"brushbgcolor\" = @Original_brushbgcolor)" +
                ") AND ((@IsNull_brushfgcolor = 1 AND \"brushfgcolor\" IS NULL) OR (\"brushfgcolor\" " +
                "= @Original_brushfgcolor)) AND ((@IsNull_brushstyle = 1 AND \"brushstyle\" IS NULL" +
                ") OR (\"brushstyle\" = @Original_brushstyle)) AND ((@IsNull_brushhatch = 1 AND \"br" +
                "ushhatch\" IS NULL) OR (\"brushhatch\" = @Original_brushhatch)) AND (\"read_only\" = " +
                "@Original_read_only) AND ((@IsNull_photo = 1 AND \"photo\" IS NULL) OR (\"photo\" = " +
                "@Original_photo)) AND ((@IsNull_id_style = 1 AND \"id_style\" IS NULL) OR (\"id_sty" +
                "le\" = @Original_id_style)) AND (\"pk_fileld\" = @Original_pk_fileld) AND ((@IsNull" +
                "_is_style = 1 AND \"is_style\" IS NULL) OR (\"is_style\" = @Original_is_style)) AND " +
                "((@IsNull_source_layer = 1 AND \"source_layer\" IS NULL) OR (\"source_layer\" = @Ori" +
                "ginal_source_layer)) AND ((@IsNull_image_column = 1 AND \"image_column\" IS NULL) " +
                "OR (\"image_column\" = @Original_image_column)) AND ((@IsNull_angle_column = 1 AND" +
                " \"angle_column\" IS NULL) OR (\"angle_column\" = @Original_angle_column)) AND ((@Is" +
                "Null_use_bounds = 1 AND \"use_bounds\" IS NULL) OR (\"use_bounds\" = @Original_use_b" +
                "ounds)) AND ((@IsNull_min_scale = 1 AND \"min_scale\" IS NULL) OR (\"min_scale\" = @" +
                "Original_min_scale)) AND ((@IsNull_max_scale = 1 AND \"max_scale\" IS NULL) OR (\"m" +
                "ax_scale\" = @Original_max_scale)) AND (\"id_group\" = @Original_id_group) AND ((@I" +
                "sNull_default_visibl = 1 AND \"default_visibl\" IS NULL) OR (\"default_visibl\" = @O" +
                "riginal_default_visibl)) AND ((@IsNull_sql_view_string = 1 AND \"sql_view_string\"" +
                " IS NULL) OR (\"sql_view_string\" = @Original_sql_view_string)) AND ((@IsNull_orde" +
                "r_num = 1 AND \"order_num\" IS NULL) OR (\"order_num\" = @Original_order_num)) AND (" +
                "(@IsNull_view_name = 1 AND \"view_name\" IS NULL) OR (\"view_name\" = @Original_view" +
                "_name)) AND ((@IsNull_masterdb_history_id = 1 AND \"masterdb_history_id\" IS NULL)" +
                " OR (\"masterdb_history_id\" = @Original_masterdb_history_id)) AND ((@IsNull_conne" +
                "ction_string = 1 AND \"connection_string\" IS NULL) OR (\"connection_string\" = @Ori" +
                "ginal_connection_string)) AND ((@IsNull_remote_lgn = 1 AND \"remote_lgn\" IS NULL)" +
                " OR (\"remote_lgn\" = @Original_remote_lgn)) AND ((@IsNull_remote_pwd = 1 AND \"rem" +
                "ote_pwd\" IS NULL) OR (\"remote_pwd\" = @Original_remote_pwd)) AND ((@IsNull_fixed_" +
                "history_id = 1 AND \"fixed_history_id\" IS NULL) OR (\"fixed_history_id\" = @Origina" +
                "l_fixed_history_id)) AND ((@IsNull_range_colors = 1 AND \"range_colors\" IS NULL) " +
                "OR (\"range_colors\" = @Original_range_colors)) AND ((@IsNull_range_column = 1 AND" +
                " \"range_column\" IS NULL) OR (\"range_column\" = @Original_range_column)) AND ((@Is" +
                "Null_precision_point = 1 AND \"precision_point\" IS NULL) OR (\"precision_point\" = " +
                "@Original_precision_point)) AND ((@IsNull_type_color = 1 AND \"type_color\" IS NUL" +
                "L) OR (\"type_color\" = @Original_type_color)) AND ((@IsNull_min_color = 1 AND \"mi" +
                "n_color\" IS NULL) OR (\"min_color\" = @Original_min_color)) AND ((@IsNull_min_val " +
                "= 1 AND \"min_val\" IS NULL) OR (\"min_val\" = @Original_min_val)) AND ((@IsNull_max" +
                "_color = 1 AND \"max_color\" IS NULL) OR (\"max_color\" = @Original_max_color)) AND " +
                "((@IsNull_max_val = 1 AND \"max_val\" IS NULL) OR (\"max_val\" = @Original_max_val))" +
                " AND ((@IsNull_use_min_val = 1 AND \"use_min_val\" IS NULL) OR (\"use_min_val\" = @O" +
                "riginal_use_min_val)) AND ((@IsNull_null_color = 1 AND \"null_color\" IS NULL) OR " +
                "(\"null_color\" = @Original_null_color)) AND ((@IsNull_use_null_color = 1 AND \"use" +
                "_null_color\" IS NULL) OR (\"use_null_color\" = @Original_use_null_color)) AND (\"hi" +
                "dden\" = @Original_hidden) AND ((@IsNull_use_max_val = 1 AND \"use_max_val\" IS NUL" +
                "L) OR (\"use_max_val\" = @Original_use_max_val)) AND (\"label_showframe\" = @Origina" +
                "l_label_showframe) AND (\"label_framecolor\" = @Original_label_framecolor) AND (\"l" +
                "abel_parallel\" = @Original_label_parallel) AND (\"label_overlap\" = @Original_labe" +
                "l_overlap) AND (\"label_usebounds\" = @Original_label_usebounds) AND (\"label_minsc" +
                "ale\" = @Original_label_minscale) AND (\"label_maxscale\" = @Original_label_maxscal" +
                "e) AND (\"label_offset\" = @Original_label_offset) AND (\"label_graphicunits\" = @Or" +
                "iginal_label_graphicunits) AND (\"label_fontname\" = @Original_label_fontname) AND" +
                " (\"label_fontcolor\" = @Original_label_fontcolor) AND (\"label_fontsize\" = @Origin" +
                "al_label_fontsize) AND (\"label_fontstrikeout\" = @Original_label_fontstrikeout) A" +
                "ND (\"label_fontitalic\" = @Original_label_fontitalic) AND (\"label_fontunderline\" " +
                "= @Original_label_fontunderline) AND (\"label_fontbold\" = @Original_label_fontbol" +
                "d) AND (\"label_uselabelstyle\" = @Original_label_uselabelstyle) AND (\"label_showl" +
                "abel\" = @Original_label_showlabel) AND (\"min_object_size\" = @Original_min_object" +
                "_size) AND ((@IsNull_ref_table = 1 AND \"ref_table\" IS NULL) OR (\"ref_table\" = @O" +
                "riginal_ref_table)) AND ((@IsNull_graphic_units = 1 AND \"graphic_units\" IS NULL)" +
                " OR (\"graphic_units\" = @Original_graphic_units)) AND (\"display_when_opening\" = @" +
                "Original_display_when_opening) AND ((@IsNull_showlinesdirections = 1 AND \"showli" +
                "nesdirections\" IS NULL) OR (\"showlinesdirections\" = @Original_showlinesdirection" +
                "s)) AND ((@IsNull_has_history = 1 AND \"has_history\" IS NULL) OR (\"has_history\" =" +
                " @Original_has_history)) AND ((@IsNull_symbol_opacity = 1 AND \"symbol_opacity\" I" +
                "S NULL) OR (\"symbol_opacity\" = @Original_symbol_opacity)) AND ((@IsNull_label_ex" +
                "pression = 1 AND \"label_expression\" IS NULL) OR (\"label_expression\" = @Original_" +
                "label_expression)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@scheme_name";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "scheme_name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@name_db";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_db";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@name_map";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_map";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@lablefiled";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "lablefiled";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@map_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "map_style";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@geom_field";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "geom_field";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@style_field";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "style_field";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@geom_type";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "geom_type";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@type";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "type";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@default_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "default_style";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@fontname";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "fontname";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@fontcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontcolor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@fontframecolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontframecolor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@fontsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontsize";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@symbol";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@pencolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pencolor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@pentype";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pentype";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@penwidth";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "penwidth";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@brushbgcolor";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "brushbgcolor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@brushfgcolor";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "brushfgcolor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@brushstyle";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushstyle";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@brushhatch";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushhatch";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@read_only";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "read_only";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@photo";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "photo";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@id_style";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_style";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@pk_fileld";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "pk_fileld";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@is_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "is_style";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@source_layer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "source_layer";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@image_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "image_column";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@angle_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "angle_column";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@use_bounds";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_bounds";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@min_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_scale";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@max_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_scale";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@id_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_group";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@default_visibl";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "default_visibl";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@sql_view_string";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "sql_view_string";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@view_name";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "view_name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@masterdb_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "masterdb_history_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@connection_string";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "connection_string";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@remote_lgn";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "remote_lgn";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@remote_pwd";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "remote_pwd";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@fixed_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fixed_history_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@range_colors";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "range_colors";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@range_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "range_column";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@precision_point";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "precision_point";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@type_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "type_color";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@min_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "min_color";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@min_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_val";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@max_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "max_color";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@max_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_val";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@use_min_val";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_min_val";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@null_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "null_color";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@use_null_color";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_null_color";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@hidden";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "hidden";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@use_max_val";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_max_val";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_showframe";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_showframe";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_framecolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_framecolor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_parallel";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_parallel";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_overlap";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_overlap";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_usebounds";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_usebounds";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_minscale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_minscale";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_maxscale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_maxscale";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_offset";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_offset";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_graphicunits";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_graphicunits";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontname";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "label_fontname";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_fontcolor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_fontsize";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontstrikeout";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontstrikeout";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontitalic";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontitalic";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontunderline";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontunderline";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_fontbold";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontbold";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_uselabelstyle";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_uselabelstyle";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_showlabel";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_showlabel";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@min_object_size";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_object_size";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@ref_table";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "ref_table";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@graphic_units";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "graphic_units";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@display_when_opening";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "display_when_opening";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@showlinesdirections";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "showlinesdirections";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@has_history";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "has_history";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@symbol_opacity";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol_opacity";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@label_expression";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "label_expression";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_scheme_name";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "scheme_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_scheme_name";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "scheme_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_name_db";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_db";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_name_map";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "name_map";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_lablefiled";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "lablefiled";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_lablefiled";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "lablefiled";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_map_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "map_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_geom_field";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "geom_field";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_style_field";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "style_field";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_geom_type";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "geom_type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_type";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_default_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "default_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_fontname";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_fontname";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "fontname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_fontcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_fontcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_fontframecolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontframecolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_fontframecolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontframecolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_fontsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontsize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_fontsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fontsize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_symbol";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_symbol";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_pencolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pencolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_pencolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pencolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_pentype";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pentype";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_pentype";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "pentype";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_penwidth";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "penwidth";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_penwidth";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "penwidth";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_brushbgcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushbgcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_brushbgcolor";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "brushbgcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_brushfgcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushfgcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_brushfgcolor";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "brushfgcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_brushstyle";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushstyle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_brushstyle";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushstyle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_brushhatch";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushhatch";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_brushhatch";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "brushhatch";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_read_only";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "read_only";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_photo";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "photo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_photo";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "photo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_id_style";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id_style";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_pk_fileld";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "pk_fileld";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_is_style";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "is_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_is_style";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "is_style";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_source_layer";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "source_layer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_source_layer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "source_layer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_image_column";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "image_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_image_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "image_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_angle_column";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "angle_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_angle_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "angle_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_use_bounds";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "use_bounds";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_use_bounds";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_bounds";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_min_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_scale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_min_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_scale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_max_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_scale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_max_scale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_scale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_id_group";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "id_group";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_default_visibl";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "default_visibl";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_default_visibl";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "default_visibl";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_sql_view_string";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "sql_view_string";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_sql_view_string";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "sql_view_string";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_order_num";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "order_num";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_view_name";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "view_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_view_name";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "view_name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_masterdb_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "masterdb_history_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_masterdb_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "masterdb_history_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_connection_string";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "connection_string";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_connection_string";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "connection_string";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_remote_lgn";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "remote_lgn";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_remote_lgn";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "remote_lgn";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_remote_pwd";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "remote_pwd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_remote_pwd";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Text;
            param.IsNullable = true;
            param.SourceColumn = "remote_pwd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_fixed_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fixed_history_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_fixed_history_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "fixed_history_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_range_colors";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "range_colors";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_range_colors";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "range_colors";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_range_column";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "range_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_range_column";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "range_column";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_precision_point";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "precision_point";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_precision_point";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "precision_point";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_type_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "type_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_type_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "type_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_min_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_min_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "min_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_min_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_min_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_max_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_max_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "max_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_max_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_max_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "max_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_use_min_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "use_min_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_use_min_val";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_min_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_null_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "null_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_null_color";
            param.DbType = global::System.Data.DbType.Int64;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Bigint;
            param.IsNullable = true;
            param.SourceColumn = "null_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_use_null_color";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "use_null_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_use_null_color";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_null_color";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_hidden";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "hidden";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_use_max_val";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "use_max_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_use_max_val";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "use_max_val";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_showframe";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_showframe";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_framecolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_framecolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_parallel";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_parallel";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_overlap";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_overlap";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_usebounds";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_usebounds";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_minscale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_minscale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_maxscale";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_maxscale";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_offset";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_offset";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_graphicunits";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_graphicunits";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontname";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "label_fontname";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontcolor";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_fontcolor";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontsize";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_fontsize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontstrikeout";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontstrikeout";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontitalic";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontitalic";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontunderline";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontunderline";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_fontbold";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_fontbold";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_uselabelstyle";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_uselabelstyle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_showlabel";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "label_showlabel";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_min_object_size";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "min_object_size";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_ref_table";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "ref_table";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_ref_table";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "ref_table";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_graphic_units";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "graphic_units";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_graphic_units";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "graphic_units";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_display_when_opening";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "display_when_opening";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_showlinesdirections";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "showlinesdirections";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_showlinesdirections";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "showlinesdirections";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_has_history";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "has_history";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_has_history";
            param.DbType = global::System.Data.DbType.Boolean;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "has_history";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_symbol_opacity";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol_opacity";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_symbol_opacity";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "symbol_opacity";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@IsNull_label_expression";
            param.DbType = global::System.Data.DbType.Int32;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Integer;
            param.IsNullable = true;
            param.SourceColumn = "label_expression";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Npgsql.NpgsqlParameter();
            param.ParameterName = "@Original_label_expression";
            param.DbType = global::System.Data.DbType.String;
            param.NpgsqlDbType = global::NpgsqlTypes.NpgsqlDbType.Varchar;
            param.IsNullable = true;
            param.SourceColumn = "label_expression";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Npgsql.NpgsqlConnection();
            this._connection.ConnectionString = global::MapMonitor.Properties.Settings.Default.inf_region_ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Npgsql.NpgsqlCommand[1];
            this._commandCollection[0] = new global::Npgsql.NpgsqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ""id"", ""scheme_name"", ""name_db"", ""name_map"", ""lablefiled"", ""map_style"", ""geom_field"", ""style_field"", ""geom_type"", ""type"", ""default_style"", ""fontname"", ""fontcolor"", ""fontframecolor"", ""fontsize"", ""symbol"", ""pencolor"", ""pentype"", ""penwidth"", ""brushbgcolor"", ""brushfgcolor"", ""brushstyle"", ""brushhatch"", ""read_only"", ""photo"", ""id_style"", ""pk_fileld"", ""is_style"", ""source_layer"", ""image_column"", ""angle_column"", ""use_bounds"", ""min_scale"", ""max_scale"", ""id_group"", ""default_visibl"", ""sql_view_string"", ""order_num"", ""view_name"", ""masterdb_history_id"", ""connection_string"", ""remote_lgn"", ""remote_pwd"", ""fixed_history_id"", ""range_colors"", ""range_column"", ""precision_point"", ""type_color"", ""min_color"", ""min_val"", ""max_color"", ""max_val"", ""use_min_val"", ""null_color"", ""use_null_color"", ""hidden"", ""use_max_val"", ""label_showframe"", ""label_framecolor"", ""label_parallel"", ""label_overlap"", ""label_usebounds"", ""label_minscale"", ""label_maxscale"", ""label_offset"", ""label_graphicunits"", ""label_fontname"", ""label_fontcolor"", ""label_fontsize"", ""label_fontstrikeout"", ""label_fontitalic"", ""label_fontunderline"", ""label_fontbold"", ""label_uselabelstyle"", ""label_showlabel"", ""min_object_size"", ""ref_table"", ""graphic_units"", ""display_when_opening"", ""showlinesdirections"", ""has_history"", ""symbol_opacity"", ""label_expression"" FROM ""sys_scheme"".""table_info""";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(inf_regionDataSet.table_infoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual inf_regionDataSet.table_infoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            inf_regionDataSet.table_infoDataTable dataTable = new inf_regionDataSet.table_infoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(inf_regionDataSet.table_infoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(inf_regionDataSet dataSet) {
            return this.Adapter.Update(dataSet, "table_info");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int @Original_id, 
                    string @Original_scheme_name, 
                    string @Original_name_db, 
                    string @Original_name_map, 
                    string @Original_lablefiled, 
                    bool @Original_map_style, 
                    string @Original_geom_field, 
                    string @Original_style_field, 
                    int @Original_geom_type, 
                    int @Original_type, 
                    bool @Original_default_style, 
                    string @Original_fontname, 
                    global::System.Nullable<int> @Original_fontcolor, 
                    global::System.Nullable<int> @Original_fontframecolor, 
                    global::System.Nullable<int> @Original_fontsize, 
                    global::System.Nullable<int> @Original_symbol, 
                    global::System.Nullable<int> @Original_pencolor, 
                    global::System.Nullable<int> @Original_pentype, 
                    global::System.Nullable<int> @Original_penwidth, 
                    global::System.Nullable<long> @Original_brushbgcolor, 
                    global::System.Nullable<long> @Original_brushfgcolor, 
                    global::System.Nullable<int> @Original_brushstyle, 
                    global::System.Nullable<int> @Original_brushhatch, 
                    bool @Original_read_only, 
                    global::System.Nullable<bool> @Original_photo, 
                    global::System.Nullable<int> @Original_id_style, 
                    string @Original_pk_fileld, 
                    global::System.Nullable<bool> @Original_is_style, 
                    global::System.Nullable<bool> @Original_source_layer, 
                    string @Original_image_column, 
                    string @Original_angle_column, 
                    global::System.Nullable<bool> @Original_use_bounds, 
                    global::System.Nullable<int> @Original_min_scale, 
                    global::System.Nullable<int> @Original_max_scale, 
                    int @Original_id_group, 
                    global::System.Nullable<bool> @Original_default_visibl, 
                    string @Original_sql_view_string, 
                    global::System.Nullable<int> @Original_order_num, 
                    string @Original_view_name, 
                    global::System.Nullable<int> @Original_masterdb_history_id, 
                    string @Original_connection_string, 
                    string @Original_remote_lgn, 
                    string @Original_remote_pwd, 
                    global::System.Nullable<int> @Original_fixed_history_id, 
                    global::System.Nullable<bool> @Original_range_colors, 
                    string @Original_range_column, 
                    global::System.Nullable<int> @Original_precision_point, 
                    global::System.Nullable<int> @Original_type_color, 
                    global::System.Nullable<long> @Original_min_color, 
                    global::System.Nullable<int> @Original_min_val, 
                    global::System.Nullable<long> @Original_max_color, 
                    global::System.Nullable<int> @Original_max_val, 
                    global::System.Nullable<bool> @Original_use_min_val, 
                    global::System.Nullable<long> @Original_null_color, 
                    global::System.Nullable<bool> @Original_use_null_color, 
                    bool @Original_hidden, 
                    global::System.Nullable<bool> @Original_use_max_val, 
                    bool @Original_label_showframe, 
                    int @Original_label_framecolor, 
                    bool @Original_label_parallel, 
                    bool @Original_label_overlap, 
                    bool @Original_label_usebounds, 
                    int @Original_label_minscale, 
                    int @Original_label_maxscale, 
                    int @Original_label_offset, 
                    bool @Original_label_graphicunits, 
                    string @Original_label_fontname, 
                    int @Original_label_fontcolor, 
                    int @Original_label_fontsize, 
                    bool @Original_label_fontstrikeout, 
                    bool @Original_label_fontitalic, 
                    bool @Original_label_fontunderline, 
                    bool @Original_label_fontbold, 
                    bool @Original_label_uselabelstyle, 
                    bool @Original_label_showlabel, 
                    int @Original_min_object_size, 
                    global::System.Nullable<int> @Original_ref_table, 
                    global::System.Nullable<bool> @Original_graphic_units, 
                    bool @Original_display_when_opening, 
                    global::System.Nullable<bool> @Original_showlinesdirections, 
                    global::System.Nullable<bool> @Original_has_history, 
                    global::System.Nullable<int> @Original_symbol_opacity, 
                    string @Original_label_expression) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(@Original_id));
            if ((@Original_scheme_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(@Original_scheme_name));
            }
            if ((@Original_name_db == null)) {
                throw new global::System.ArgumentNullException("@Original_name_db");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(@Original_name_db));
            }
            if ((@Original_name_map == null)) {
                throw new global::System.ArgumentNullException("@Original_name_map");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(@Original_name_map));
            }
            if ((@Original_lablefiled == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(@Original_lablefiled));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(@Original_map_style));
            if ((@Original_geom_field == null)) {
                throw new global::System.ArgumentNullException("@Original_geom_field");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(@Original_geom_field));
            }
            if ((@Original_style_field == null)) {
                throw new global::System.ArgumentNullException("@Original_style_field");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(@Original_style_field));
            }
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(@Original_geom_type));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(@Original_type));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(@Original_default_style));
            if ((@Original_fontname == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(@Original_fontname));
            }
            if ((@Original_fontcolor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(@Original_fontcolor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((@Original_fontframecolor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(@Original_fontframecolor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((@Original_fontsize.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(@Original_fontsize.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((@Original_symbol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(@Original_symbol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((@Original_pencolor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(@Original_pencolor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((@Original_pentype.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((int)(@Original_pentype.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((@Original_penwidth.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((int)(@Original_penwidth.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((@Original_brushbgcolor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((long)(@Original_brushbgcolor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((@Original_brushfgcolor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((long)(@Original_brushfgcolor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((@Original_brushstyle.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((int)(@Original_brushstyle.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((@Original_brushhatch.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((int)(@Original_brushhatch.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[37].Value = ((bool)(@Original_read_only));
            if ((@Original_photo.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[39].Value = ((bool)(@Original_photo.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((@Original_id_style.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[41].Value = ((int)(@Original_id_style.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((@Original_pk_fileld == null)) {
                throw new global::System.ArgumentNullException("@Original_pk_fileld");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(@Original_pk_fileld));
            }
            if ((@Original_is_style.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((bool)(@Original_is_style.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((@Original_source_layer.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((bool)(@Original_source_layer.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((@Original_image_column == null)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((string)(@Original_image_column));
            }
            if ((@Original_angle_column == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(@Original_angle_column));
            }
            if ((@Original_use_bounds.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((bool)(@Original_use_bounds.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((@Original_min_scale.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((int)(@Original_min_scale.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((@Original_max_scale.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((int)(@Original_max_scale.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[57].Value = ((int)(@Original_id_group));
            if ((@Original_default_visibl.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[59].Value = ((bool)(@Original_default_visibl.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((@Original_sql_view_string == null)) {
                this.Adapter.DeleteCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[61].Value = ((string)(@Original_sql_view_string));
            }
            if ((@Original_order_num.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[63].Value = ((int)(@Original_order_num.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((@Original_view_name == null)) {
                this.Adapter.DeleteCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[65].Value = ((string)(@Original_view_name));
            }
            if ((@Original_masterdb_history_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[67].Value = ((int)(@Original_masterdb_history_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((@Original_connection_string == null)) {
                this.Adapter.DeleteCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[69].Value = ((string)(@Original_connection_string));
            }
            if ((@Original_remote_lgn == null)) {
                this.Adapter.DeleteCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[71].Value = ((string)(@Original_remote_lgn));
            }
            if ((@Original_remote_pwd == null)) {
                this.Adapter.DeleteCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[73].Value = ((string)(@Original_remote_pwd));
            }
            if ((@Original_fixed_history_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[75].Value = ((int)(@Original_fixed_history_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((@Original_range_colors.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[77].Value = ((bool)(@Original_range_colors.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((@Original_range_column == null)) {
                this.Adapter.DeleteCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[79].Value = ((string)(@Original_range_column));
            }
            if ((@Original_precision_point.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[81].Value = ((int)(@Original_precision_point.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((@Original_type_color.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[83].Value = ((int)(@Original_type_color.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((@Original_min_color.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[85].Value = ((long)(@Original_min_color.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((@Original_min_val.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[87].Value = ((int)(@Original_min_val.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((@Original_max_color.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[89].Value = ((long)(@Original_max_color.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((@Original_max_val.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[91].Value = ((int)(@Original_max_val.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((@Original_use_min_val.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[93].Value = ((bool)(@Original_use_min_val.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((@Original_null_color.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[95].Value = ((long)(@Original_null_color.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            if ((@Original_use_null_color.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[96].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[97].Value = ((bool)(@Original_use_null_color.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[96].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[98].Value = ((bool)(@Original_hidden));
            if ((@Original_use_max_val.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[100].Value = ((bool)(@Original_use_max_val.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[101].Value = ((bool)(@Original_label_showframe));
            this.Adapter.DeleteCommand.Parameters[102].Value = ((int)(@Original_label_framecolor));
            this.Adapter.DeleteCommand.Parameters[103].Value = ((bool)(@Original_label_parallel));
            this.Adapter.DeleteCommand.Parameters[104].Value = ((bool)(@Original_label_overlap));
            this.Adapter.DeleteCommand.Parameters[105].Value = ((bool)(@Original_label_usebounds));
            this.Adapter.DeleteCommand.Parameters[106].Value = ((int)(@Original_label_minscale));
            this.Adapter.DeleteCommand.Parameters[107].Value = ((int)(@Original_label_maxscale));
            this.Adapter.DeleteCommand.Parameters[108].Value = ((int)(@Original_label_offset));
            this.Adapter.DeleteCommand.Parameters[109].Value = ((bool)(@Original_label_graphicunits));
            if ((@Original_label_fontname == null)) {
                throw new global::System.ArgumentNullException("@Original_label_fontname");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[110].Value = ((string)(@Original_label_fontname));
            }
            this.Adapter.DeleteCommand.Parameters[111].Value = ((int)(@Original_label_fontcolor));
            this.Adapter.DeleteCommand.Parameters[112].Value = ((int)(@Original_label_fontsize));
            this.Adapter.DeleteCommand.Parameters[113].Value = ((bool)(@Original_label_fontstrikeout));
            this.Adapter.DeleteCommand.Parameters[114].Value = ((bool)(@Original_label_fontitalic));
            this.Adapter.DeleteCommand.Parameters[115].Value = ((bool)(@Original_label_fontunderline));
            this.Adapter.DeleteCommand.Parameters[116].Value = ((bool)(@Original_label_fontbold));
            this.Adapter.DeleteCommand.Parameters[117].Value = ((bool)(@Original_label_uselabelstyle));
            this.Adapter.DeleteCommand.Parameters[118].Value = ((bool)(@Original_label_showlabel));
            this.Adapter.DeleteCommand.Parameters[119].Value = ((int)(@Original_min_object_size));
            if ((@Original_ref_table.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[120].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[121].Value = ((int)(@Original_ref_table.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[120].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[121].Value = global::System.DBNull.Value;
            }
            if ((@Original_graphic_units.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[122].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[123].Value = ((bool)(@Original_graphic_units.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[122].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[123].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[124].Value = ((bool)(@Original_display_when_opening));
            if ((@Original_showlinesdirections.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[125].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[126].Value = ((bool)(@Original_showlinesdirections.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[125].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[126].Value = global::System.DBNull.Value;
            }
            if ((@Original_has_history.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[127].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[128].Value = ((bool)(@Original_has_history.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[127].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[128].Value = global::System.DBNull.Value;
            }
            if ((@Original_symbol_opacity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[129].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[130].Value = ((int)(@Original_symbol_opacity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[129].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[130].Value = global::System.DBNull.Value;
            }
            if ((@Original_label_expression == null)) {
                this.Adapter.DeleteCommand.Parameters[131].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[132].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[131].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[132].Value = ((string)(@Original_label_expression));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string @scheme_name, 
                    string @name_db, 
                    string @name_map, 
                    string @lablefiled, 
                    bool @map_style, 
                    string @geom_field, 
                    string @style_field, 
                    int @geom_type, 
                    int @type, 
                    bool @default_style, 
                    string @fontname, 
                    global::System.Nullable<int> @fontcolor, 
                    global::System.Nullable<int> @fontframecolor, 
                    global::System.Nullable<int> @fontsize, 
                    global::System.Nullable<int> @symbol, 
                    global::System.Nullable<int> @pencolor, 
                    global::System.Nullable<int> @pentype, 
                    global::System.Nullable<int> @penwidth, 
                    global::System.Nullable<long> @brushbgcolor, 
                    global::System.Nullable<long> @brushfgcolor, 
                    global::System.Nullable<int> @brushstyle, 
                    global::System.Nullable<int> @brushhatch, 
                    bool @read_only, 
                    global::System.Nullable<bool> @photo, 
                    global::System.Nullable<int> @id_style, 
                    string @pk_fileld, 
                    global::System.Nullable<bool> @is_style, 
                    global::System.Nullable<bool> @source_layer, 
                    string @image_column, 
                    string @angle_column, 
                    global::System.Nullable<bool> @use_bounds, 
                    global::System.Nullable<int> @min_scale, 
                    global::System.Nullable<int> @max_scale, 
                    int @id_group, 
                    global::System.Nullable<bool> @default_visibl, 
                    string @sql_view_string, 
                    global::System.Nullable<int> @order_num, 
                    string @view_name, 
                    global::System.Nullable<int> @masterdb_history_id, 
                    string @connection_string, 
                    string @remote_lgn, 
                    string @remote_pwd, 
                    global::System.Nullable<int> @fixed_history_id, 
                    global::System.Nullable<bool> @range_colors, 
                    string @range_column, 
                    global::System.Nullable<int> @precision_point, 
                    global::System.Nullable<int> @type_color, 
                    global::System.Nullable<long> @min_color, 
                    global::System.Nullable<int> @min_val, 
                    global::System.Nullable<long> @max_color, 
                    global::System.Nullable<int> @max_val, 
                    global::System.Nullable<bool> @use_min_val, 
                    global::System.Nullable<long> @null_color, 
                    global::System.Nullable<bool> @use_null_color, 
                    bool @hidden, 
                    global::System.Nullable<bool> @use_max_val, 
                    bool @label_showframe, 
                    int @label_framecolor, 
                    bool @label_parallel, 
                    bool @label_overlap, 
                    bool @label_usebounds, 
                    int @label_minscale, 
                    int @label_maxscale, 
                    int @label_offset, 
                    bool @label_graphicunits, 
                    string @label_fontname, 
                    int @label_fontcolor, 
                    int @label_fontsize, 
                    bool @label_fontstrikeout, 
                    bool @label_fontitalic, 
                    bool @label_fontunderline, 
                    bool @label_fontbold, 
                    bool @label_uselabelstyle, 
                    bool @label_showlabel, 
                    int @min_object_size, 
                    global::System.Nullable<int> @ref_table, 
                    global::System.Nullable<bool> @graphic_units, 
                    bool @display_when_opening, 
                    global::System.Nullable<bool> @showlinesdirections, 
                    global::System.Nullable<bool> @has_history, 
                    global::System.Nullable<int> @symbol_opacity, 
                    string @label_expression) {
            if ((@scheme_name == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(@scheme_name));
            }
            if ((@name_db == null)) {
                throw new global::System.ArgumentNullException("@name_db");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(@name_db));
            }
            if ((@name_map == null)) {
                throw new global::System.ArgumentNullException("@name_map");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(@name_map));
            }
            if ((@lablefiled == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(@lablefiled));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(@map_style));
            if ((@geom_field == null)) {
                throw new global::System.ArgumentNullException("@geom_field");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(@geom_field));
            }
            if ((@style_field == null)) {
                throw new global::System.ArgumentNullException("@style_field");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(@style_field));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(@geom_type));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(@type));
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(@default_style));
            if ((@fontname == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(@fontname));
            }
            if ((@fontcolor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(@fontcolor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((@fontframecolor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(@fontframecolor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((@fontsize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(@fontsize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((@symbol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(@symbol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((@pencolor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(@pencolor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((@pentype.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(@pentype.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((@penwidth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(@penwidth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((@brushbgcolor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((long)(@brushbgcolor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((@brushfgcolor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((long)(@brushfgcolor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((@brushstyle.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((int)(@brushstyle.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((@brushhatch.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((int)(@brushhatch.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[22].Value = ((bool)(@read_only));
            if ((@photo.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((bool)(@photo.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((@id_style.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(@id_style.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((@pk_fileld == null)) {
                throw new global::System.ArgumentNullException("@pk_fileld");
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(@pk_fileld));
            }
            if ((@is_style.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((bool)(@is_style.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((@source_layer.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((bool)(@source_layer.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((@image_column == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(@image_column));
            }
            if ((@angle_column == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(@angle_column));
            }
            if ((@use_bounds.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((bool)(@use_bounds.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((@min_scale.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((int)(@min_scale.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((@max_scale.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((int)(@max_scale.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[33].Value = ((int)(@id_group));
            if ((@default_visibl.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((bool)(@default_visibl.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((@sql_view_string == null)) {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = ((string)(@sql_view_string));
            }
            if ((@order_num.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((int)(@order_num.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((@view_name == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(@view_name));
            }
            if ((@masterdb_history_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((int)(@masterdb_history_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((@connection_string == null)) {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = ((string)(@connection_string));
            }
            if ((@remote_lgn == null)) {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = ((string)(@remote_lgn));
            }
            if ((@remote_pwd == null)) {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = ((string)(@remote_pwd));
            }
            if ((@fixed_history_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((int)(@fixed_history_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((@range_colors.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((bool)(@range_colors.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((@range_column == null)) {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = ((string)(@range_column));
            }
            if ((@precision_point.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[45].Value = ((int)(@precision_point.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((@type_color.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[46].Value = ((int)(@type_color.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((@min_color.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[47].Value = ((long)(@min_color.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((@min_val.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[48].Value = ((int)(@min_val.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((@max_color.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[49].Value = ((long)(@max_color.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((@max_val.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[50].Value = ((int)(@max_val.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((@use_min_val.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[51].Value = ((bool)(@use_min_val.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((@null_color.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[52].Value = ((long)(@null_color.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((@use_null_color.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[53].Value = ((bool)(@use_null_color.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[54].Value = ((bool)(@hidden));
            if ((@use_max_val.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[55].Value = ((bool)(@use_max_val.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[56].Value = ((bool)(@label_showframe));
            this.Adapter.InsertCommand.Parameters[57].Value = ((int)(@label_framecolor));
            this.Adapter.InsertCommand.Parameters[58].Value = ((bool)(@label_parallel));
            this.Adapter.InsertCommand.Parameters[59].Value = ((bool)(@label_overlap));
            this.Adapter.InsertCommand.Parameters[60].Value = ((bool)(@label_usebounds));
            this.Adapter.InsertCommand.Parameters[61].Value = ((int)(@label_minscale));
            this.Adapter.InsertCommand.Parameters[62].Value = ((int)(@label_maxscale));
            this.Adapter.InsertCommand.Parameters[63].Value = ((int)(@label_offset));
            this.Adapter.InsertCommand.Parameters[64].Value = ((bool)(@label_graphicunits));
            if ((@label_fontname == null)) {
                throw new global::System.ArgumentNullException("@label_fontname");
            }
            else {
                this.Adapter.InsertCommand.Parameters[65].Value = ((string)(@label_fontname));
            }
            this.Adapter.InsertCommand.Parameters[66].Value = ((int)(@label_fontcolor));
            this.Adapter.InsertCommand.Parameters[67].Value = ((int)(@label_fontsize));
            this.Adapter.InsertCommand.Parameters[68].Value = ((bool)(@label_fontstrikeout));
            this.Adapter.InsertCommand.Parameters[69].Value = ((bool)(@label_fontitalic));
            this.Adapter.InsertCommand.Parameters[70].Value = ((bool)(@label_fontunderline));
            this.Adapter.InsertCommand.Parameters[71].Value = ((bool)(@label_fontbold));
            this.Adapter.InsertCommand.Parameters[72].Value = ((bool)(@label_uselabelstyle));
            this.Adapter.InsertCommand.Parameters[73].Value = ((bool)(@label_showlabel));
            this.Adapter.InsertCommand.Parameters[74].Value = ((int)(@min_object_size));
            if ((@ref_table.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[75].Value = ((int)(@ref_table.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((@graphic_units.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[76].Value = ((bool)(@graphic_units.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[77].Value = ((bool)(@display_when_opening));
            if ((@showlinesdirections.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[78].Value = ((bool)(@showlinesdirections.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((@has_history.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[79].Value = ((bool)(@has_history.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((@symbol_opacity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[80].Value = ((int)(@symbol_opacity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((@label_expression == null)) {
                this.Adapter.InsertCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[81].Value = ((string)(@label_expression));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string @scheme_name, 
                    string @name_db, 
                    string @name_map, 
                    string @lablefiled, 
                    bool @map_style, 
                    string @geom_field, 
                    string @style_field, 
                    int @geom_type, 
                    int @type, 
                    bool @default_style, 
                    string @fontname, 
                    global::System.Nullable<int> @fontcolor, 
                    global::System.Nullable<int> @fontframecolor, 
                    global::System.Nullable<int> @fontsize, 
                    global::System.Nullable<int> @symbol, 
                    global::System.Nullable<int> @pencolor, 
                    global::System.Nullable<int> @pentype, 
                    global::System.Nullable<int> @penwidth, 
                    global::System.Nullable<long> @brushbgcolor, 
                    global::System.Nullable<long> @brushfgcolor, 
                    global::System.Nullable<int> @brushstyle, 
                    global::System.Nullable<int> @brushhatch, 
                    bool @read_only, 
                    global::System.Nullable<bool> @photo, 
                    global::System.Nullable<int> @id_style, 
                    string @pk_fileld, 
                    global::System.Nullable<bool> @is_style, 
                    global::System.Nullable<bool> @source_layer, 
                    string @image_column, 
                    string @angle_column, 
                    global::System.Nullable<bool> @use_bounds, 
                    global::System.Nullable<int> @min_scale, 
                    global::System.Nullable<int> @max_scale, 
                    int @id_group, 
                    global::System.Nullable<bool> @default_visibl, 
                    string @sql_view_string, 
                    global::System.Nullable<int> @order_num, 
                    string @view_name, 
                    global::System.Nullable<int> @masterdb_history_id, 
                    string @connection_string, 
                    string @remote_lgn, 
                    string @remote_pwd, 
                    global::System.Nullable<int> @fixed_history_id, 
                    global::System.Nullable<bool> @range_colors, 
                    string @range_column, 
                    global::System.Nullable<int> @precision_point, 
                    global::System.Nullable<int> @type_color, 
                    global::System.Nullable<long> @min_color, 
                    global::System.Nullable<int> @min_val, 
                    global::System.Nullable<long> @max_color, 
                    global::System.Nullable<int> @max_val, 
                    global::System.Nullable<bool> @use_min_val, 
                    global::System.Nullable<long> @null_color, 
                    global::System.Nullable<bool> @use_null_color, 
                    bool @hidden, 
                    global::System.Nullable<bool> @use_max_val, 
                    bool @label_showframe, 
                    int @label_framecolor, 
                    bool @label_parallel, 
                    bool @label_overlap, 
                    bool @label_usebounds, 
                    int @label_minscale, 
                    int @label_maxscale, 
                    int @label_offset, 
                    bool @label_graphicunits, 
                    string @label_fontname, 
                    int @label_fontcolor, 
                    int @label_fontsize, 
                    bool @label_fontstrikeout, 
                    bool @label_fontitalic, 
                    bool @label_fontunderline, 
                    bool @label_fontbold, 
                    bool @label_uselabelstyle, 
                    bool @label_showlabel, 
                    int @min_object_size, 
                    global::System.Nullable<int> @ref_table, 
                    global::System.Nullable<bool> @graphic_units, 
                    bool @display_when_opening, 
                    global::System.Nullable<bool> @showlinesdirections, 
                    global::System.Nullable<bool> @has_history, 
                    global::System.Nullable<int> @symbol_opacity, 
                    string @label_expression, 
                    int @Original_id, 
                    string @Original_scheme_name, 
                    string @Original_name_db, 
                    string @Original_name_map, 
                    string @Original_lablefiled, 
                    bool @Original_map_style, 
                    string @Original_geom_field, 
                    string @Original_style_field, 
                    int @Original_geom_type, 
                    int @Original_type, 
                    bool @Original_default_style, 
                    string @Original_fontname, 
                    global::System.Nullable<int> @Original_fontcolor, 
                    global::System.Nullable<int> @Original_fontframecolor, 
                    global::System.Nullable<int> @Original_fontsize, 
                    global::System.Nullable<int> @Original_symbol, 
                    global::System.Nullable<int> @Original_pencolor, 
                    global::System.Nullable<int> @Original_pentype, 
                    global::System.Nullable<int> @Original_penwidth, 
                    global::System.Nullable<long> @Original_brushbgcolor, 
                    global::System.Nullable<long> @Original_brushfgcolor, 
                    global::System.Nullable<int> @Original_brushstyle, 
                    global::System.Nullable<int> @Original_brushhatch, 
                    bool @Original_read_only, 
                    global::System.Nullable<bool> @Original_photo, 
                    global::System.Nullable<int> @Original_id_style, 
                    string @Original_pk_fileld, 
                    global::System.Nullable<bool> @Original_is_style, 
                    global::System.Nullable<bool> @Original_source_layer, 
                    string @Original_image_column, 
                    string @Original_angle_column, 
                    global::System.Nullable<bool> @Original_use_bounds, 
                    global::System.Nullable<int> @Original_min_scale, 
                    global::System.Nullable<int> @Original_max_scale, 
                    int @Original_id_group, 
                    global::System.Nullable<bool> @Original_default_visibl, 
                    string @Original_sql_view_string, 
                    global::System.Nullable<int> @Original_order_num, 
                    string @Original_view_name, 
                    global::System.Nullable<int> @Original_masterdb_history_id, 
                    string @Original_connection_string, 
                    string @Original_remote_lgn, 
                    string @Original_remote_pwd, 
                    global::System.Nullable<int> @Original_fixed_history_id, 
                    global::System.Nullable<bool> @Original_range_colors, 
                    string @Original_range_column, 
                    global::System.Nullable<int> @Original_precision_point, 
                    global::System.Nullable<int> @Original_type_color, 
                    global::System.Nullable<long> @Original_min_color, 
                    global::System.Nullable<int> @Original_min_val, 
                    global::System.Nullable<long> @Original_max_color, 
                    global::System.Nullable<int> @Original_max_val, 
                    global::System.Nullable<bool> @Original_use_min_val, 
                    global::System.Nullable<long> @Original_null_color, 
                    global::System.Nullable<bool> @Original_use_null_color, 
                    bool @Original_hidden, 
                    global::System.Nullable<bool> @Original_use_max_val, 
                    bool @Original_label_showframe, 
                    int @Original_label_framecolor, 
                    bool @Original_label_parallel, 
                    bool @Original_label_overlap, 
                    bool @Original_label_usebounds, 
                    int @Original_label_minscale, 
                    int @Original_label_maxscale, 
                    int @Original_label_offset, 
                    bool @Original_label_graphicunits, 
                    string @Original_label_fontname, 
                    int @Original_label_fontcolor, 
                    int @Original_label_fontsize, 
                    bool @Original_label_fontstrikeout, 
                    bool @Original_label_fontitalic, 
                    bool @Original_label_fontunderline, 
                    bool @Original_label_fontbold, 
                    bool @Original_label_uselabelstyle, 
                    bool @Original_label_showlabel, 
                    int @Original_min_object_size, 
                    global::System.Nullable<int> @Original_ref_table, 
                    global::System.Nullable<bool> @Original_graphic_units, 
                    bool @Original_display_when_opening, 
                    global::System.Nullable<bool> @Original_showlinesdirections, 
                    global::System.Nullable<bool> @Original_has_history, 
                    global::System.Nullable<int> @Original_symbol_opacity, 
                    string @Original_label_expression) {
            if ((@scheme_name == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(@scheme_name));
            }
            if ((@name_db == null)) {
                throw new global::System.ArgumentNullException("@name_db");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(@name_db));
            }
            if ((@name_map == null)) {
                throw new global::System.ArgumentNullException("@name_map");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(@name_map));
            }
            if ((@lablefiled == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(@lablefiled));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(@map_style));
            if ((@geom_field == null)) {
                throw new global::System.ArgumentNullException("@geom_field");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(@geom_field));
            }
            if ((@style_field == null)) {
                throw new global::System.ArgumentNullException("@style_field");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(@style_field));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(@geom_type));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(@type));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(@default_style));
            if ((@fontname == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(@fontname));
            }
            if ((@fontcolor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(@fontcolor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((@fontframecolor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(@fontframecolor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((@fontsize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(@fontsize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((@symbol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(@symbol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((@pencolor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(@pencolor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((@pentype.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(@pentype.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((@penwidth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(@penwidth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((@brushbgcolor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(@brushbgcolor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((@brushfgcolor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(@brushfgcolor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((@brushstyle.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(@brushstyle.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((@brushhatch.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(@brushhatch.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((bool)(@read_only));
            if ((@photo.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(@photo.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((@id_style.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(@id_style.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((@pk_fileld == null)) {
                throw new global::System.ArgumentNullException("@pk_fileld");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(@pk_fileld));
            }
            if ((@is_style.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(@is_style.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((@source_layer.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((bool)(@source_layer.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((@image_column == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(@image_column));
            }
            if ((@angle_column == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(@angle_column));
            }
            if ((@use_bounds.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((bool)(@use_bounds.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((@min_scale.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(@min_scale.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((@max_scale.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(@max_scale.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(@id_group));
            if ((@default_visibl.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((bool)(@default_visibl.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((@sql_view_string == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(@sql_view_string));
            }
            if ((@order_num.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(@order_num.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((@view_name == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(@view_name));
            }
            if ((@masterdb_history_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(@masterdb_history_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((@connection_string == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(@connection_string));
            }
            if ((@remote_lgn == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(@remote_lgn));
            }
            if ((@remote_pwd == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(@remote_pwd));
            }
            if ((@fixed_history_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(@fixed_history_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((@range_colors.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((bool)(@range_colors.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((@range_column == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(@range_column));
            }
            if ((@precision_point.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((int)(@precision_point.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((@type_color.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((int)(@type_color.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((@min_color.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((long)(@min_color.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((@min_val.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((int)(@min_val.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((@max_color.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((long)(@max_color.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((@max_val.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((int)(@max_val.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((@use_min_val.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((bool)(@use_min_val.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((@null_color.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((long)(@null_color.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((@use_null_color.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((bool)(@use_null_color.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[54].Value = ((bool)(@hidden));
            if ((@use_max_val.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((bool)(@use_max_val.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[56].Value = ((bool)(@label_showframe));
            this.Adapter.UpdateCommand.Parameters[57].Value = ((int)(@label_framecolor));
            this.Adapter.UpdateCommand.Parameters[58].Value = ((bool)(@label_parallel));
            this.Adapter.UpdateCommand.Parameters[59].Value = ((bool)(@label_overlap));
            this.Adapter.UpdateCommand.Parameters[60].Value = ((bool)(@label_usebounds));
            this.Adapter.UpdateCommand.Parameters[61].Value = ((int)(@label_minscale));
            this.Adapter.UpdateCommand.Parameters[62].Value = ((int)(@label_maxscale));
            this.Adapter.UpdateCommand.Parameters[63].Value = ((int)(@label_offset));
            this.Adapter.UpdateCommand.Parameters[64].Value = ((bool)(@label_graphicunits));
            if ((@label_fontname == null)) {
                throw new global::System.ArgumentNullException("@label_fontname");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((string)(@label_fontname));
            }
            this.Adapter.UpdateCommand.Parameters[66].Value = ((int)(@label_fontcolor));
            this.Adapter.UpdateCommand.Parameters[67].Value = ((int)(@label_fontsize));
            this.Adapter.UpdateCommand.Parameters[68].Value = ((bool)(@label_fontstrikeout));
            this.Adapter.UpdateCommand.Parameters[69].Value = ((bool)(@label_fontitalic));
            this.Adapter.UpdateCommand.Parameters[70].Value = ((bool)(@label_fontunderline));
            this.Adapter.UpdateCommand.Parameters[71].Value = ((bool)(@label_fontbold));
            this.Adapter.UpdateCommand.Parameters[72].Value = ((bool)(@label_uselabelstyle));
            this.Adapter.UpdateCommand.Parameters[73].Value = ((bool)(@label_showlabel));
            this.Adapter.UpdateCommand.Parameters[74].Value = ((int)(@min_object_size));
            if ((@ref_table.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((int)(@ref_table.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((@graphic_units.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((bool)(@graphic_units.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[77].Value = ((bool)(@display_when_opening));
            if ((@showlinesdirections.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((bool)(@showlinesdirections.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((@has_history.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((bool)(@has_history.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((@symbol_opacity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((int)(@symbol_opacity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((@label_expression == null)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((string)(@label_expression));
            }
            this.Adapter.UpdateCommand.Parameters[82].Value = ((int)(@Original_id));
            if ((@Original_scheme_name == null)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[84].Value = ((string)(@Original_scheme_name));
            }
            if ((@Original_name_db == null)) {
                throw new global::System.ArgumentNullException("@Original_name_db");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((string)(@Original_name_db));
            }
            if ((@Original_name_map == null)) {
                throw new global::System.ArgumentNullException("@Original_name_map");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((string)(@Original_name_map));
            }
            if ((@Original_lablefiled == null)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[88].Value = ((string)(@Original_lablefiled));
            }
            this.Adapter.UpdateCommand.Parameters[89].Value = ((bool)(@Original_map_style));
            if ((@Original_geom_field == null)) {
                throw new global::System.ArgumentNullException("@Original_geom_field");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((string)(@Original_geom_field));
            }
            if ((@Original_style_field == null)) {
                throw new global::System.ArgumentNullException("@Original_style_field");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((string)(@Original_style_field));
            }
            this.Adapter.UpdateCommand.Parameters[92].Value = ((int)(@Original_geom_type));
            this.Adapter.UpdateCommand.Parameters[93].Value = ((int)(@Original_type));
            this.Adapter.UpdateCommand.Parameters[94].Value = ((bool)(@Original_default_style));
            if ((@Original_fontname == null)) {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[96].Value = ((string)(@Original_fontname));
            }
            if ((@Original_fontcolor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[98].Value = ((int)(@Original_fontcolor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            if ((@Original_fontframecolor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[100].Value = ((int)(@Original_fontframecolor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            if ((@Original_fontsize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[102].Value = ((int)(@Original_fontsize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            if ((@Original_symbol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[104].Value = ((int)(@Original_symbol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[104].Value = global::System.DBNull.Value;
            }
            if ((@Original_pencolor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[106].Value = ((int)(@Original_pencolor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[106].Value = global::System.DBNull.Value;
            }
            if ((@Original_pentype.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[108].Value = ((int)(@Original_pentype.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[108].Value = global::System.DBNull.Value;
            }
            if ((@Original_penwidth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[110].Value = ((int)(@Original_penwidth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[110].Value = global::System.DBNull.Value;
            }
            if ((@Original_brushbgcolor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[112].Value = ((long)(@Original_brushbgcolor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[112].Value = global::System.DBNull.Value;
            }
            if ((@Original_brushfgcolor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[114].Value = ((long)(@Original_brushfgcolor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[114].Value = global::System.DBNull.Value;
            }
            if ((@Original_brushstyle.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[116].Value = ((int)(@Original_brushstyle.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[116].Value = global::System.DBNull.Value;
            }
            if ((@Original_brushhatch.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[118].Value = ((int)(@Original_brushhatch.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[118].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[119].Value = ((bool)(@Original_read_only));
            if ((@Original_photo.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[121].Value = ((bool)(@Original_photo.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[121].Value = global::System.DBNull.Value;
            }
            if ((@Original_id_style.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[123].Value = ((int)(@Original_id_style.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[123].Value = global::System.DBNull.Value;
            }
            if ((@Original_pk_fileld == null)) {
                throw new global::System.ArgumentNullException("@Original_pk_fileld");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[124].Value = ((string)(@Original_pk_fileld));
            }
            if ((@Original_is_style.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[125].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[126].Value = ((bool)(@Original_is_style.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[125].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[126].Value = global::System.DBNull.Value;
            }
            if ((@Original_source_layer.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[127].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[128].Value = ((bool)(@Original_source_layer.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[127].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[128].Value = global::System.DBNull.Value;
            }
            if ((@Original_image_column == null)) {
                this.Adapter.UpdateCommand.Parameters[129].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[130].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[129].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[130].Value = ((string)(@Original_image_column));
            }
            if ((@Original_angle_column == null)) {
                this.Adapter.UpdateCommand.Parameters[131].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[132].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[131].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[132].Value = ((string)(@Original_angle_column));
            }
            if ((@Original_use_bounds.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[133].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[134].Value = ((bool)(@Original_use_bounds.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[133].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[134].Value = global::System.DBNull.Value;
            }
            if ((@Original_min_scale.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[135].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[136].Value = ((int)(@Original_min_scale.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[135].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[136].Value = global::System.DBNull.Value;
            }
            if ((@Original_max_scale.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[137].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[138].Value = ((int)(@Original_max_scale.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[137].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[138].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[139].Value = ((int)(@Original_id_group));
            if ((@Original_default_visibl.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[140].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[141].Value = ((bool)(@Original_default_visibl.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[140].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[141].Value = global::System.DBNull.Value;
            }
            if ((@Original_sql_view_string == null)) {
                this.Adapter.UpdateCommand.Parameters[142].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[143].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[142].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[143].Value = ((string)(@Original_sql_view_string));
            }
            if ((@Original_order_num.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[144].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[145].Value = ((int)(@Original_order_num.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[144].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[145].Value = global::System.DBNull.Value;
            }
            if ((@Original_view_name == null)) {
                this.Adapter.UpdateCommand.Parameters[146].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[147].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[146].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[147].Value = ((string)(@Original_view_name));
            }
            if ((@Original_masterdb_history_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[148].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[149].Value = ((int)(@Original_masterdb_history_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[148].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[149].Value = global::System.DBNull.Value;
            }
            if ((@Original_connection_string == null)) {
                this.Adapter.UpdateCommand.Parameters[150].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[151].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[150].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[151].Value = ((string)(@Original_connection_string));
            }
            if ((@Original_remote_lgn == null)) {
                this.Adapter.UpdateCommand.Parameters[152].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[153].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[152].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[153].Value = ((string)(@Original_remote_lgn));
            }
            if ((@Original_remote_pwd == null)) {
                this.Adapter.UpdateCommand.Parameters[154].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[155].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[154].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[155].Value = ((string)(@Original_remote_pwd));
            }
            if ((@Original_fixed_history_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[156].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[157].Value = ((int)(@Original_fixed_history_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[156].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[157].Value = global::System.DBNull.Value;
            }
            if ((@Original_range_colors.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[158].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[159].Value = ((bool)(@Original_range_colors.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[158].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[159].Value = global::System.DBNull.Value;
            }
            if ((@Original_range_column == null)) {
                this.Adapter.UpdateCommand.Parameters[160].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[161].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[160].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[161].Value = ((string)(@Original_range_column));
            }
            if ((@Original_precision_point.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[162].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[163].Value = ((int)(@Original_precision_point.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[162].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[163].Value = global::System.DBNull.Value;
            }
            if ((@Original_type_color.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[164].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[165].Value = ((int)(@Original_type_color.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[164].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[165].Value = global::System.DBNull.Value;
            }
            if ((@Original_min_color.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[166].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[167].Value = ((long)(@Original_min_color.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[166].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[167].Value = global::System.DBNull.Value;
            }
            if ((@Original_min_val.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[168].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[169].Value = ((int)(@Original_min_val.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[168].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[169].Value = global::System.DBNull.Value;
            }
            if ((@Original_max_color.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[170].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[171].Value = ((long)(@Original_max_color.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[170].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[171].Value = global::System.DBNull.Value;
            }
            if ((@Original_max_val.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[172].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[173].Value = ((int)(@Original_max_val.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[172].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[173].Value = global::System.DBNull.Value;
            }
            if ((@Original_use_min_val.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[174].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[175].Value = ((bool)(@Original_use_min_val.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[174].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[175].Value = global::System.DBNull.Value;
            }
            if ((@Original_null_color.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[176].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[177].Value = ((long)(@Original_null_color.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[176].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[177].Value = global::System.DBNull.Value;
            }
            if ((@Original_use_null_color.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[178].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[179].Value = ((bool)(@Original_use_null_color.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[178].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[179].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[180].Value = ((bool)(@Original_hidden));
            if ((@Original_use_max_val.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[181].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[182].Value = ((bool)(@Original_use_max_val.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[181].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[182].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[183].Value = ((bool)(@Original_label_showframe));
            this.Adapter.UpdateCommand.Parameters[184].Value = ((int)(@Original_label_framecolor));
            this.Adapter.UpdateCommand.Parameters[185].Value = ((bool)(@Original_label_parallel));
            this.Adapter.UpdateCommand.Parameters[186].Value = ((bool)(@Original_label_overlap));
            this.Adapter.UpdateCommand.Parameters[187].Value = ((bool)(@Original_label_usebounds));
            this.Adapter.UpdateCommand.Parameters[188].Value = ((int)(@Original_label_minscale));
            this.Adapter.UpdateCommand.Parameters[189].Value = ((int)(@Original_label_maxscale));
            this.Adapter.UpdateCommand.Parameters[190].Value = ((int)(@Original_label_offset));
            this.Adapter.UpdateCommand.Parameters[191].Value = ((bool)(@Original_label_graphicunits));
            if ((@Original_label_fontname == null)) {
                throw new global::System.ArgumentNullException("@Original_label_fontname");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[192].Value = ((string)(@Original_label_fontname));
            }
            this.Adapter.UpdateCommand.Parameters[193].Value = ((int)(@Original_label_fontcolor));
            this.Adapter.UpdateCommand.Parameters[194].Value = ((int)(@Original_label_fontsize));
            this.Adapter.UpdateCommand.Parameters[195].Value = ((bool)(@Original_label_fontstrikeout));
            this.Adapter.UpdateCommand.Parameters[196].Value = ((bool)(@Original_label_fontitalic));
            this.Adapter.UpdateCommand.Parameters[197].Value = ((bool)(@Original_label_fontunderline));
            this.Adapter.UpdateCommand.Parameters[198].Value = ((bool)(@Original_label_fontbold));
            this.Adapter.UpdateCommand.Parameters[199].Value = ((bool)(@Original_label_uselabelstyle));
            this.Adapter.UpdateCommand.Parameters[200].Value = ((bool)(@Original_label_showlabel));
            this.Adapter.UpdateCommand.Parameters[201].Value = ((int)(@Original_min_object_size));
            if ((@Original_ref_table.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[202].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[203].Value = ((int)(@Original_ref_table.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[202].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[203].Value = global::System.DBNull.Value;
            }
            if ((@Original_graphic_units.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[204].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[205].Value = ((bool)(@Original_graphic_units.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[204].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[205].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[206].Value = ((bool)(@Original_display_when_opening));
            if ((@Original_showlinesdirections.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[207].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[208].Value = ((bool)(@Original_showlinesdirections.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[207].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[208].Value = global::System.DBNull.Value;
            }
            if ((@Original_has_history.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[209].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[210].Value = ((bool)(@Original_has_history.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[209].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[210].Value = global::System.DBNull.Value;
            }
            if ((@Original_symbol_opacity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[211].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[212].Value = ((int)(@Original_symbol_opacity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[211].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[212].Value = global::System.DBNull.Value;
            }
            if ((@Original_label_expression == null)) {
                this.Adapter.UpdateCommand.Parameters[213].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[214].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[213].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[214].Value = ((string)(@Original_label_expression));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private table_groupsTableAdapter _table_groupsTableAdapter;
        
        private table_groups_tableTableAdapter _table_groups_tableTableAdapter;
        
        private table_infoTableAdapter _table_infoTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public table_groupsTableAdapter table_groupsTableAdapter {
            get {
                return this._table_groupsTableAdapter;
            }
            set {
                this._table_groupsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public table_groups_tableTableAdapter table_groups_tableTableAdapter {
            get {
                return this._table_groups_tableTableAdapter;
            }
            set {
                this._table_groups_tableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public table_infoTableAdapter table_infoTableAdapter {
            get {
                return this._table_infoTableAdapter;
            }
            set {
                this._table_infoTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._table_groupsTableAdapter != null) 
                            && (this._table_groupsTableAdapter.Connection != null))) {
                    return this._table_groupsTableAdapter.Connection;
                }
                if (((this._table_groups_tableTableAdapter != null) 
                            && (this._table_groups_tableTableAdapter.Connection != null))) {
                    return this._table_groups_tableTableAdapter.Connection;
                }
                if (((this._table_infoTableAdapter != null) 
                            && (this._table_infoTableAdapter.Connection != null))) {
                    return this._table_infoTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._table_groupsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._table_groups_tableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._table_infoTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateUpdatedRows(inf_regionDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._table_infoTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.table_info.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._table_infoTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._table_groups_tableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.table_groups_table.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._table_groups_tableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._table_groupsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.table_groups.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._table_groupsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateInsertedRows(inf_regionDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._table_infoTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.table_info.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._table_infoTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._table_groups_tableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.table_groups_table.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._table_groups_tableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._table_groupsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.table_groups.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._table_groupsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateDeletedRows(inf_regionDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._table_groupsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.table_groups.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._table_groupsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._table_groups_tableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.table_groups_table.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._table_groups_tableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._table_infoTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.table_info.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._table_infoTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public virtual int UpdateAll(inf_regionDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._table_groupsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._table_groupsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._table_groups_tableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._table_groups_tableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._table_infoTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._table_infoTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._table_groupsTableAdapter != null)) {
                    revertConnections.Add(this._table_groupsTableAdapter, this._table_groupsTableAdapter.Connection);
                    this._table_groupsTableAdapter.Connection = ((global::Npgsql.NpgsqlConnection)(workConnection));
                    this._table_groupsTableAdapter.Transaction = ((global::Npgsql.NpgsqlTransaction)(workTransaction));
                    if (this._table_groupsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._table_groupsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._table_groupsTableAdapter.Adapter);
                    }
                }
                if ((this._table_groups_tableTableAdapter != null)) {
                    revertConnections.Add(this._table_groups_tableTableAdapter, this._table_groups_tableTableAdapter.Connection);
                    this._table_groups_tableTableAdapter.Connection = ((global::Npgsql.NpgsqlConnection)(workConnection));
                    this._table_groups_tableTableAdapter.Transaction = ((global::Npgsql.NpgsqlTransaction)(workTransaction));
                    if (this._table_groups_tableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._table_groups_tableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._table_groups_tableTableAdapter.Adapter);
                    }
                }
                if ((this._table_infoTableAdapter != null)) {
                    revertConnections.Add(this._table_infoTableAdapter, this._table_infoTableAdapter.Connection);
                    this._table_infoTableAdapter.Connection = ((global::Npgsql.NpgsqlConnection)(workConnection));
                    this._table_infoTableAdapter.Transaction = ((global::Npgsql.NpgsqlTransaction)(workTransaction));
                    if (this._table_infoTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._table_infoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._table_infoTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._table_groupsTableAdapter != null)) {
                    this._table_groupsTableAdapter.Connection = ((global::Npgsql.NpgsqlConnection)(revertConnections[this._table_groupsTableAdapter]));
                    this._table_groupsTableAdapter.Transaction = null;
                }
                if ((this._table_groups_tableTableAdapter != null)) {
                    this._table_groups_tableTableAdapter.Connection = ((global::Npgsql.NpgsqlConnection)(revertConnections[this._table_groups_tableTableAdapter]));
                    this._table_groups_tableTableAdapter.Transaction = null;
                }
                if ((this._table_infoTableAdapter != null)) {
                    this._table_infoTableAdapter.Connection = ((global::Npgsql.NpgsqlConnection)(revertConnections[this._table_infoTableAdapter]));
                    this._table_infoTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591